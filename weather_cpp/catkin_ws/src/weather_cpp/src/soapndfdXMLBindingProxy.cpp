/* soapndfdXMLBindingProxy.cpp
   Generated by gSOAP 2.8.16 from ndfd.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "weather_cpp/soapndfdXMLBindingProxy.h"

ndfdXMLBindingProxy::ndfdXMLBindingProxy()
{	this->soap = soap_new();
	this->own = true;
	ndfdXMLBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ndfdXMLBindingProxy::ndfdXMLBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	ndfdXMLBindingProxy_init(_soap->imode, _soap->omode);
}

ndfdXMLBindingProxy::ndfdXMLBindingProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	ndfdXMLBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

ndfdXMLBindingProxy::ndfdXMLBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	ndfdXMLBindingProxy_init(iomode, iomode);
}

ndfdXMLBindingProxy::ndfdXMLBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	ndfdXMLBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

ndfdXMLBindingProxy::ndfdXMLBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	ndfdXMLBindingProxy_init(imode, omode);
}

ndfdXMLBindingProxy::~ndfdXMLBindingProxy()
{	if (this->own)
		soap_free(this->soap);
}

void ndfdXMLBindingProxy::ndfdXMLBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd", NULL, NULL},
	{"ns1", "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void ndfdXMLBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ndfdXMLBindingProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ndfdXMLBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ndfdXMLBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *ndfdXMLBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *ndfdXMLBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *ndfdXMLBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *ndfdXMLBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int ndfdXMLBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ndfdXMLBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void ndfdXMLBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ndfdXMLBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ndfdXMLBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int ndfdXMLBindingProxy::NDFDgen(const char *endpoint, const char *soap_action, std::string latitude, std::string longitude, enum ns2__productType product, time_t startTime, time_t endTime, enum ns2__unitType Unit, ns2__weatherParametersType *weatherParameters, std::string &dwmlOut)
{	struct soap *soap = this->soap;
	struct ns1__NDFDgen soap_tmp_ns1__NDFDgen;
	struct ns1__NDFDgenResponse *soap_tmp_ns1__NDFDgenResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgen";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__NDFDgen.latitude = latitude;
	soap_tmp_ns1__NDFDgen.longitude = longitude;
	soap_tmp_ns1__NDFDgen.product = product;
	soap_tmp_ns1__NDFDgen.startTime = startTime;
	soap_tmp_ns1__NDFDgen.endTime = endTime;
	soap_tmp_ns1__NDFDgen.Unit = Unit;
	soap_tmp_ns1__NDFDgen.weatherParameters = weatherParameters;
	soap_serializeheader(soap);
	soap_serialize_ns1__NDFDgen(soap, &soap_tmp_ns1__NDFDgen);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__NDFDgen(soap, &soap_tmp_ns1__NDFDgen, "ns1:NDFDgen", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__NDFDgen(soap, &soap_tmp_ns1__NDFDgen, "ns1:NDFDgen", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&dwmlOut)
		return soap_closesock(soap);
	soap_default_std__string(soap, &dwmlOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__NDFDgenResponse = soap_get_ns1__NDFDgenResponse(soap, NULL, "", "");
	if (!soap_tmp_ns1__NDFDgenResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	dwmlOut = soap_tmp_ns1__NDFDgenResponse->dwmlOut;
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::NDFDgenByDay(const char *endpoint, const char *soap_action, std::string latitude, std::string longitude, std::string startDate, std::string numDays, enum ns2__unitType Unit, enum ns2__formatType format, std::string &dwmlByDayOut)
{	struct soap *soap = this->soap;
	struct ns1__NDFDgenByDay soap_tmp_ns1__NDFDgenByDay;
	struct ns1__NDFDgenByDayResponse *soap_tmp_ns1__NDFDgenByDayResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDay";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__NDFDgenByDay.latitude = latitude;
	soap_tmp_ns1__NDFDgenByDay.longitude = longitude;
	soap_tmp_ns1__NDFDgenByDay.startDate = startDate;
	soap_tmp_ns1__NDFDgenByDay.numDays = numDays;
	soap_tmp_ns1__NDFDgenByDay.Unit = Unit;
	soap_tmp_ns1__NDFDgenByDay.format = format;
	soap_serializeheader(soap);
	soap_serialize_ns1__NDFDgenByDay(soap, &soap_tmp_ns1__NDFDgenByDay);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__NDFDgenByDay(soap, &soap_tmp_ns1__NDFDgenByDay, "ns1:NDFDgenByDay", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__NDFDgenByDay(soap, &soap_tmp_ns1__NDFDgenByDay, "ns1:NDFDgenByDay", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&dwmlByDayOut)
		return soap_closesock(soap);
	soap_default_std__string(soap, &dwmlByDayOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__NDFDgenByDayResponse = soap_get_ns1__NDFDgenByDayResponse(soap, NULL, "", "");
	if (!soap_tmp_ns1__NDFDgenByDayResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	dwmlByDayOut = soap_tmp_ns1__NDFDgenByDayResponse->dwmlByDayOut;
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::NDFDgenLatLonList(const char *endpoint, const char *soap_action, std::string listLatLon, enum ns2__productType product, time_t startTime, time_t endTime, enum ns2__unitType Unit, ns2__weatherParametersType *weatherParameters, std::string &dwmlOut)
{	struct soap *soap = this->soap;
	struct ns1__NDFDgenLatLonList soap_tmp_ns1__NDFDgenLatLonList;
	struct ns1__NDFDgenLatLonListResponse *soap_tmp_ns1__NDFDgenLatLonListResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenLatLonList";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__NDFDgenLatLonList.listLatLon = listLatLon;
	soap_tmp_ns1__NDFDgenLatLonList.product = product;
	soap_tmp_ns1__NDFDgenLatLonList.startTime = startTime;
	soap_tmp_ns1__NDFDgenLatLonList.endTime = endTime;
	soap_tmp_ns1__NDFDgenLatLonList.Unit = Unit;
	soap_tmp_ns1__NDFDgenLatLonList.weatherParameters = weatherParameters;
	soap_serializeheader(soap);
	soap_serialize_ns1__NDFDgenLatLonList(soap, &soap_tmp_ns1__NDFDgenLatLonList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__NDFDgenLatLonList(soap, &soap_tmp_ns1__NDFDgenLatLonList, "ns1:NDFDgenLatLonList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__NDFDgenLatLonList(soap, &soap_tmp_ns1__NDFDgenLatLonList, "ns1:NDFDgenLatLonList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&dwmlOut)
		return soap_closesock(soap);
	soap_default_std__string(soap, &dwmlOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__NDFDgenLatLonListResponse = soap_get_ns1__NDFDgenLatLonListResponse(soap, NULL, "", "");
	if (!soap_tmp_ns1__NDFDgenLatLonListResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	dwmlOut = soap_tmp_ns1__NDFDgenLatLonListResponse->dwmlOut;
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::NDFDgenByDayLatLonList(const char *endpoint, const char *soap_action, std::string listLatLon, std::string startDate, std::string numDays, enum ns2__unitType Unit, enum ns2__formatType format, std::string &dwmlByDayOut)
{	struct soap *soap = this->soap;
	struct ns1__NDFDgenByDayLatLonList soap_tmp_ns1__NDFDgenByDayLatLonList;
	struct ns1__NDFDgenByDayLatLonListResponse *soap_tmp_ns1__NDFDgenByDayLatLonListResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDayLatLonList";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__NDFDgenByDayLatLonList.listLatLon = listLatLon;
	soap_tmp_ns1__NDFDgenByDayLatLonList.startDate = startDate;
	soap_tmp_ns1__NDFDgenByDayLatLonList.numDays = numDays;
	soap_tmp_ns1__NDFDgenByDayLatLonList.Unit = Unit;
	soap_tmp_ns1__NDFDgenByDayLatLonList.format = format;
	soap_serializeheader(soap);
	soap_serialize_ns1__NDFDgenByDayLatLonList(soap, &soap_tmp_ns1__NDFDgenByDayLatLonList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__NDFDgenByDayLatLonList(soap, &soap_tmp_ns1__NDFDgenByDayLatLonList, "ns1:NDFDgenByDayLatLonList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__NDFDgenByDayLatLonList(soap, &soap_tmp_ns1__NDFDgenByDayLatLonList, "ns1:NDFDgenByDayLatLonList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&dwmlByDayOut)
		return soap_closesock(soap);
	soap_default_std__string(soap, &dwmlByDayOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__NDFDgenByDayLatLonListResponse = soap_get_ns1__NDFDgenByDayLatLonListResponse(soap, NULL, "", "");
	if (!soap_tmp_ns1__NDFDgenByDayLatLonListResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	dwmlByDayOut = soap_tmp_ns1__NDFDgenByDayLatLonListResponse->dwmlByDayOut;
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::GmlLatLonList(const char *endpoint, const char *soap_action, std::string listLatLon, time_t requestedTime, enum ns2__featureTypeType featureType, ns2__weatherParametersType *weatherParameters, std::string &dwGmlOut)
{	struct soap *soap = this->soap;
	struct ns1__GmlLatLonList soap_tmp_ns1__GmlLatLonList;
	struct ns1__GmlLatLonListResponse *soap_tmp_ns1__GmlLatLonListResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlLatLonList";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__GmlLatLonList.listLatLon = listLatLon;
	soap_tmp_ns1__GmlLatLonList.requestedTime = requestedTime;
	soap_tmp_ns1__GmlLatLonList.featureType = featureType;
	soap_tmp_ns1__GmlLatLonList.weatherParameters = weatherParameters;
	soap_serializeheader(soap);
	soap_serialize_ns1__GmlLatLonList(soap, &soap_tmp_ns1__GmlLatLonList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GmlLatLonList(soap, &soap_tmp_ns1__GmlLatLonList, "ns1:GmlLatLonList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GmlLatLonList(soap, &soap_tmp_ns1__GmlLatLonList, "ns1:GmlLatLonList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&dwGmlOut)
		return soap_closesock(soap);
	soap_default_std__string(soap, &dwGmlOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__GmlLatLonListResponse = soap_get_ns1__GmlLatLonListResponse(soap, NULL, "", "");
	if (!soap_tmp_ns1__GmlLatLonListResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	dwGmlOut = soap_tmp_ns1__GmlLatLonListResponse->dwGmlOut;
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::GmlTimeSeries(const char *endpoint, const char *soap_action, std::string listLatLon, time_t startTime, time_t endTime, enum ns2__compTypeType compType, enum ns2__featureTypeType featureType, std::string propertyName, std::string &dwGmlOut)
{	struct soap *soap = this->soap;
	struct ns1__GmlTimeSeries soap_tmp_ns1__GmlTimeSeries;
	struct ns1__GmlTimeSeriesResponse *soap_tmp_ns1__GmlTimeSeriesResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlTimeSeries";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__GmlTimeSeries.listLatLon = listLatLon;
	soap_tmp_ns1__GmlTimeSeries.startTime = startTime;
	soap_tmp_ns1__GmlTimeSeries.endTime = endTime;
	soap_tmp_ns1__GmlTimeSeries.compType = compType;
	soap_tmp_ns1__GmlTimeSeries.featureType = featureType;
	soap_tmp_ns1__GmlTimeSeries.propertyName = propertyName;
	soap_serializeheader(soap);
	soap_serialize_ns1__GmlTimeSeries(soap, &soap_tmp_ns1__GmlTimeSeries);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GmlTimeSeries(soap, &soap_tmp_ns1__GmlTimeSeries, "ns1:GmlTimeSeries", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GmlTimeSeries(soap, &soap_tmp_ns1__GmlTimeSeries, "ns1:GmlTimeSeries", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&dwGmlOut)
		return soap_closesock(soap);
	soap_default_std__string(soap, &dwGmlOut);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__GmlTimeSeriesResponse = soap_get_ns1__GmlTimeSeriesResponse(soap, NULL, "", "");
	if (!soap_tmp_ns1__GmlTimeSeriesResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	dwGmlOut = soap_tmp_ns1__GmlTimeSeriesResponse->dwGmlOut;
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::LatLonListSubgrid(const char *endpoint, const char *soap_action, std::string lowerLeftLatitude, std::string lowerLeftLongitude, std::string upperRightLatitude, std::string upperRightLongitude, std::string resolution, struct ns1__LatLonListSubgridResponse &_param_1)
{	struct soap *soap = this->soap;
	struct ns1__LatLonListSubgrid soap_tmp_ns1__LatLonListSubgrid;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSubgrid";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__LatLonListSubgrid.lowerLeftLatitude = lowerLeftLatitude;
	soap_tmp_ns1__LatLonListSubgrid.lowerLeftLongitude = lowerLeftLongitude;
	soap_tmp_ns1__LatLonListSubgrid.upperRightLatitude = upperRightLatitude;
	soap_tmp_ns1__LatLonListSubgrid.upperRightLongitude = upperRightLongitude;
	soap_tmp_ns1__LatLonListSubgrid.resolution = resolution;
	soap_serializeheader(soap);
	soap_serialize_ns1__LatLonListSubgrid(soap, &soap_tmp_ns1__LatLonListSubgrid);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__LatLonListSubgrid(soap, &soap_tmp_ns1__LatLonListSubgrid, "ns1:LatLonListSubgrid", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__LatLonListSubgrid(soap, &soap_tmp_ns1__LatLonListSubgrid, "ns1:LatLonListSubgrid", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_ns1__LatLonListSubgridResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__LatLonListSubgridResponse(soap, &_param_1, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::LatLonListLine(const char *endpoint, const char *soap_action, std::string endPoint1Lat, std::string endPoint1Lon, std::string endPoint2Lat, std::string endPoint2Lon, struct ns1__LatLonListLineResponse &_param_2)
{	struct soap *soap = this->soap;
	struct ns1__LatLonListLine soap_tmp_ns1__LatLonListLine;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListLine";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__LatLonListLine.endPoint1Lat = endPoint1Lat;
	soap_tmp_ns1__LatLonListLine.endPoint1Lon = endPoint1Lon;
	soap_tmp_ns1__LatLonListLine.endPoint2Lat = endPoint2Lat;
	soap_tmp_ns1__LatLonListLine.endPoint2Lon = endPoint2Lon;
	soap_serializeheader(soap);
	soap_serialize_ns1__LatLonListLine(soap, &soap_tmp_ns1__LatLonListLine);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__LatLonListLine(soap, &soap_tmp_ns1__LatLonListLine, "ns1:LatLonListLine", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__LatLonListLine(soap, &soap_tmp_ns1__LatLonListLine, "ns1:LatLonListLine", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_ns1__LatLonListLineResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__LatLonListLineResponse(soap, &_param_2, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::LatLonListZipCode(const char *endpoint, const char *soap_action, std::string zipCodeList, struct ns1__LatLonListZipCodeResponse &_param_3)
{	struct soap *soap = this->soap;
	struct ns1__LatLonListZipCode soap_tmp_ns1__LatLonListZipCode;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListZipCode";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__LatLonListZipCode.zipCodeList = zipCodeList;
	soap_serializeheader(soap);
	soap_serialize_ns1__LatLonListZipCode(soap, &soap_tmp_ns1__LatLonListZipCode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__LatLonListZipCode(soap, &soap_tmp_ns1__LatLonListZipCode, "ns1:LatLonListZipCode", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__LatLonListZipCode(soap, &soap_tmp_ns1__LatLonListZipCode, "ns1:LatLonListZipCode", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_ns1__LatLonListZipCodeResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__LatLonListZipCodeResponse(soap, &_param_3, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::LatLonListSquare(const char *endpoint, const char *soap_action, std::string centerPointLat, std::string centerPointLon, std::string distanceLat, std::string distanceLon, std::string resolution, struct ns1__LatLonListSquareResponse &_param_4)
{	struct soap *soap = this->soap;
	struct ns1__LatLonListSquare soap_tmp_ns1__LatLonListSquare;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSquare";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__LatLonListSquare.centerPointLat = centerPointLat;
	soap_tmp_ns1__LatLonListSquare.centerPointLon = centerPointLon;
	soap_tmp_ns1__LatLonListSquare.distanceLat = distanceLat;
	soap_tmp_ns1__LatLonListSquare.distanceLon = distanceLon;
	soap_tmp_ns1__LatLonListSquare.resolution = resolution;
	soap_serializeheader(soap);
	soap_serialize_ns1__LatLonListSquare(soap, &soap_tmp_ns1__LatLonListSquare);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__LatLonListSquare(soap, &soap_tmp_ns1__LatLonListSquare, "ns1:LatLonListSquare", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__LatLonListSquare(soap, &soap_tmp_ns1__LatLonListSquare, "ns1:LatLonListSquare", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_4)
		return soap_closesock(soap);
	soap_default_ns1__LatLonListSquareResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__LatLonListSquareResponse(soap, &_param_4, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::CornerPoints(const char *endpoint, const char *soap_action, enum ns2__sectorType sector, struct ns1__CornerPointsResponse &_param_5)
{	struct soap *soap = this->soap;
	struct ns1__CornerPoints soap_tmp_ns1__CornerPoints;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#CornerPoints";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__CornerPoints.sector = sector;
	soap_serializeheader(soap);
	soap_serialize_ns1__CornerPoints(soap, &soap_tmp_ns1__CornerPoints);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__CornerPoints(soap, &soap_tmp_ns1__CornerPoints, "ns1:CornerPoints", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__CornerPoints(soap, &soap_tmp_ns1__CornerPoints, "ns1:CornerPoints", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_5)
		return soap_closesock(soap);
	soap_default_ns1__CornerPointsResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__CornerPointsResponse(soap, &_param_5, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ndfdXMLBindingProxy::LatLonListCityNames(const char *endpoint, const char *soap_action, enum ns2__displayLevelType displayLevel, struct ns1__LatLonListCityNamesResponse &_param_6)
{	struct soap *soap = this->soap;
	struct ns1__LatLonListCityNames soap_tmp_ns1__LatLonListCityNames;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php";
	if (soap_action == NULL)
		soap_action = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListCityNames";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__LatLonListCityNames.displayLevel = displayLevel;
	soap_serializeheader(soap);
	soap_serialize_ns1__LatLonListCityNames(soap, &soap_tmp_ns1__LatLonListCityNames);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__LatLonListCityNames(soap, &soap_tmp_ns1__LatLonListCityNames, "ns1:LatLonListCityNames", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__LatLonListCityNames(soap, &soap_tmp_ns1__LatLonListCityNames, "ns1:LatLonListCityNames", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_6)
		return soap_closesock(soap);
	soap_default_ns1__LatLonListCityNamesResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__LatLonListCityNamesResponse(soap, &_param_6, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
