/* soapC.cpp
   Generated by gSOAP 2.8.16 from ndfd.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "weather_cpp/soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.16 2017-01-18 03:45:48 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns2__displayLevelType:
		return soap_in_ns2__displayLevelType(soap, NULL, NULL, "ns2:displayLevelType");
	case SOAP_TYPE_ns2__compTypeType:
		return soap_in_ns2__compTypeType(soap, NULL, NULL, "ns2:compTypeType");
	case SOAP_TYPE_ns2__featureTypeType:
		return soap_in_ns2__featureTypeType(soap, NULL, NULL, "ns2:featureTypeType");
	case SOAP_TYPE_ns2__productType:
		return soap_in_ns2__productType(soap, NULL, NULL, "ns2:productType");
	case SOAP_TYPE_ns2__formatType:
		return soap_in_ns2__formatType(soap, NULL, NULL, "ns2:formatType");
	case SOAP_TYPE_ns2__unitType:
		return soap_in_ns2__unitType(soap, NULL, NULL, "ns2:unitType");
	case SOAP_TYPE_ns2__sectorType:
		return soap_in_ns2__sectorType(soap, NULL, NULL, "ns2:sectorType");
	case SOAP_TYPE_ns2__listCityNamesType:
		return soap_in_ns2__listCityNamesType(soap, NULL, NULL, "ns2:listCityNamesType");
	case SOAP_TYPE_ns2__zipCodeListType:
		return soap_in_ns2__zipCodeListType(soap, NULL, NULL, "ns2:zipCodeListType");
	case SOAP_TYPE_ns2__zipCodeType:
		return soap_in_ns2__zipCodeType(soap, NULL, NULL, "ns2:zipCodeType");
	case SOAP_TYPE_ns2__listLatLonType:
		return soap_in_ns2__listLatLonType(soap, NULL, NULL, "ns2:listLatLonType");
	case SOAP_TYPE_ns2__latLonPairType:
		return soap_in_ns2__latLonPairType(soap, NULL, NULL, "ns2:latLonPairType");
	case SOAP_TYPE_ns2__weatherParametersType:
		return soap_in_ns2__weatherParametersType(soap, NULL, NULL, "ns2:weatherParametersType");
	case SOAP_TYPE_xsd__integer:
		return soap_in_xsd__integer(soap, NULL, NULL, "xsd:integer");
	case SOAP_TYPE_xsd__decimal:
		return soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__date:
		return soap_in_xsd__date(soap, NULL, NULL, "xsd:date");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__LatLonListCityNames:
		return soap_in_ns1__LatLonListCityNames(soap, NULL, NULL, "ns1:LatLonListCityNames");
	case SOAP_TYPE_ns1__LatLonListCityNamesResponse:
		return soap_in_ns1__LatLonListCityNamesResponse(soap, NULL, NULL, "ns1:LatLonListCityNamesResponse");
	case SOAP_TYPE_ns1__CornerPoints:
		return soap_in_ns1__CornerPoints(soap, NULL, NULL, "ns1:CornerPoints");
	case SOAP_TYPE_ns1__CornerPointsResponse:
		return soap_in_ns1__CornerPointsResponse(soap, NULL, NULL, "ns1:CornerPointsResponse");
	case SOAP_TYPE_ns1__LatLonListSquare:
		return soap_in_ns1__LatLonListSquare(soap, NULL, NULL, "ns1:LatLonListSquare");
	case SOAP_TYPE_ns1__LatLonListSquareResponse:
		return soap_in_ns1__LatLonListSquareResponse(soap, NULL, NULL, "ns1:LatLonListSquareResponse");
	case SOAP_TYPE_ns1__LatLonListZipCode:
		return soap_in_ns1__LatLonListZipCode(soap, NULL, NULL, "ns1:LatLonListZipCode");
	case SOAP_TYPE_ns1__LatLonListZipCodeResponse:
		return soap_in_ns1__LatLonListZipCodeResponse(soap, NULL, NULL, "ns1:LatLonListZipCodeResponse");
	case SOAP_TYPE_ns1__LatLonListLine:
		return soap_in_ns1__LatLonListLine(soap, NULL, NULL, "ns1:LatLonListLine");
	case SOAP_TYPE_ns1__LatLonListLineResponse:
		return soap_in_ns1__LatLonListLineResponse(soap, NULL, NULL, "ns1:LatLonListLineResponse");
	case SOAP_TYPE_ns1__LatLonListSubgrid:
		return soap_in_ns1__LatLonListSubgrid(soap, NULL, NULL, "ns1:LatLonListSubgrid");
	case SOAP_TYPE_ns1__LatLonListSubgridResponse:
		return soap_in_ns1__LatLonListSubgridResponse(soap, NULL, NULL, "ns1:LatLonListSubgridResponse");
	case SOAP_TYPE_ns1__GmlTimeSeries:
		return soap_in_ns1__GmlTimeSeries(soap, NULL, NULL, "ns1:GmlTimeSeries");
	case SOAP_TYPE_ns1__GmlTimeSeriesResponse:
		return soap_in_ns1__GmlTimeSeriesResponse(soap, NULL, NULL, "ns1:GmlTimeSeriesResponse");
	case SOAP_TYPE_ns1__GmlLatLonList:
		return soap_in_ns1__GmlLatLonList(soap, NULL, NULL, "ns1:GmlLatLonList");
	case SOAP_TYPE_ns1__GmlLatLonListResponse:
		return soap_in_ns1__GmlLatLonListResponse(soap, NULL, NULL, "ns1:GmlLatLonListResponse");
	case SOAP_TYPE_ns1__NDFDgenByDayLatLonList:
		return soap_in_ns1__NDFDgenByDayLatLonList(soap, NULL, NULL, "ns1:NDFDgenByDayLatLonList");
	case SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse:
		return soap_in_ns1__NDFDgenByDayLatLonListResponse(soap, NULL, NULL, "ns1:NDFDgenByDayLatLonListResponse");
	case SOAP_TYPE_ns1__NDFDgenLatLonList:
		return soap_in_ns1__NDFDgenLatLonList(soap, NULL, NULL, "ns1:NDFDgenLatLonList");
	case SOAP_TYPE_ns1__NDFDgenLatLonListResponse:
		return soap_in_ns1__NDFDgenLatLonListResponse(soap, NULL, NULL, "ns1:NDFDgenLatLonListResponse");
	case SOAP_TYPE_ns1__NDFDgenByDay:
		return soap_in_ns1__NDFDgenByDay(soap, NULL, NULL, "ns1:NDFDgenByDay");
	case SOAP_TYPE_ns1__NDFDgenByDayResponse:
		return soap_in_ns1__NDFDgenByDayResponse(soap, NULL, NULL, "ns1:NDFDgenByDayResponse");
	case SOAP_TYPE_ns1__NDFDgen:
		return soap_in_ns1__NDFDgen(soap, NULL, NULL, "ns1:NDFDgen");
	case SOAP_TYPE_ns1__NDFDgenResponse:
		return soap_in_ns1__NDFDgenResponse(soap, NULL, NULL, "ns1:NDFDgenResponse");
	case SOAP_TYPE_PointerTons2__weatherParametersType:
		return soap_in_PointerTons2__weatherParametersType(soap, NULL, NULL, "ns2:weatherParametersType");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns2:listCityNamesType"))
		{	*type = SOAP_TYPE_ns2__listCityNamesType;
			return soap_in_ns2__listCityNamesType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:zipCodeListType"))
		{	*type = SOAP_TYPE_ns2__zipCodeListType;
			return soap_in_ns2__zipCodeListType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:zipCodeType"))
		{	*type = SOAP_TYPE_ns2__zipCodeType;
			return soap_in_ns2__zipCodeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:listLatLonType"))
		{	*type = SOAP_TYPE_ns2__listLatLonType;
			return soap_in_ns2__listLatLonType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:latLonPairType"))
		{	*type = SOAP_TYPE_ns2__latLonPairType;
			return soap_in_ns2__latLonPairType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:weatherParametersType"))
		{	*type = SOAP_TYPE_ns2__weatherParametersType;
			return soap_in_ns2__weatherParametersType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer;
			return soap_in_xsd__integer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal;
			return soap_in_xsd__decimal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:date"))
		{	*type = SOAP_TYPE_xsd__date;
			return soap_in_xsd__date(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:displayLevelType"))
		{	*type = SOAP_TYPE_ns2__displayLevelType;
			return soap_in_ns2__displayLevelType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:compTypeType"))
		{	*type = SOAP_TYPE_ns2__compTypeType;
			return soap_in_ns2__compTypeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:featureTypeType"))
		{	*type = SOAP_TYPE_ns2__featureTypeType;
			return soap_in_ns2__featureTypeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:productType"))
		{	*type = SOAP_TYPE_ns2__productType;
			return soap_in_ns2__productType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:formatType"))
		{	*type = SOAP_TYPE_ns2__formatType;
			return soap_in_ns2__formatType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:unitType"))
		{	*type = SOAP_TYPE_ns2__unitType;
			return soap_in_ns2__unitType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:sectorType"))
		{	*type = SOAP_TYPE_ns2__sectorType;
			return soap_in_ns2__sectorType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LatLonListCityNames"))
		{	*type = SOAP_TYPE_ns1__LatLonListCityNames;
			return soap_in_ns1__LatLonListCityNames(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LatLonListCityNamesResponse"))
		{	*type = SOAP_TYPE_ns1__LatLonListCityNamesResponse;
			return soap_in_ns1__LatLonListCityNamesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CornerPoints"))
		{	*type = SOAP_TYPE_ns1__CornerPoints;
			return soap_in_ns1__CornerPoints(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CornerPointsResponse"))
		{	*type = SOAP_TYPE_ns1__CornerPointsResponse;
			return soap_in_ns1__CornerPointsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LatLonListSquare"))
		{	*type = SOAP_TYPE_ns1__LatLonListSquare;
			return soap_in_ns1__LatLonListSquare(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LatLonListSquareResponse"))
		{	*type = SOAP_TYPE_ns1__LatLonListSquareResponse;
			return soap_in_ns1__LatLonListSquareResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LatLonListZipCode"))
		{	*type = SOAP_TYPE_ns1__LatLonListZipCode;
			return soap_in_ns1__LatLonListZipCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LatLonListZipCodeResponse"))
		{	*type = SOAP_TYPE_ns1__LatLonListZipCodeResponse;
			return soap_in_ns1__LatLonListZipCodeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LatLonListLine"))
		{	*type = SOAP_TYPE_ns1__LatLonListLine;
			return soap_in_ns1__LatLonListLine(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LatLonListLineResponse"))
		{	*type = SOAP_TYPE_ns1__LatLonListLineResponse;
			return soap_in_ns1__LatLonListLineResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LatLonListSubgrid"))
		{	*type = SOAP_TYPE_ns1__LatLonListSubgrid;
			return soap_in_ns1__LatLonListSubgrid(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LatLonListSubgridResponse"))
		{	*type = SOAP_TYPE_ns1__LatLonListSubgridResponse;
			return soap_in_ns1__LatLonListSubgridResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GmlTimeSeries"))
		{	*type = SOAP_TYPE_ns1__GmlTimeSeries;
			return soap_in_ns1__GmlTimeSeries(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GmlTimeSeriesResponse"))
		{	*type = SOAP_TYPE_ns1__GmlTimeSeriesResponse;
			return soap_in_ns1__GmlTimeSeriesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GmlLatLonList"))
		{	*type = SOAP_TYPE_ns1__GmlLatLonList;
			return soap_in_ns1__GmlLatLonList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GmlLatLonListResponse"))
		{	*type = SOAP_TYPE_ns1__GmlLatLonListResponse;
			return soap_in_ns1__GmlLatLonListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NDFDgenByDayLatLonList"))
		{	*type = SOAP_TYPE_ns1__NDFDgenByDayLatLonList;
			return soap_in_ns1__NDFDgenByDayLatLonList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NDFDgenByDayLatLonListResponse"))
		{	*type = SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse;
			return soap_in_ns1__NDFDgenByDayLatLonListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NDFDgenLatLonList"))
		{	*type = SOAP_TYPE_ns1__NDFDgenLatLonList;
			return soap_in_ns1__NDFDgenLatLonList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NDFDgenLatLonListResponse"))
		{	*type = SOAP_TYPE_ns1__NDFDgenLatLonListResponse;
			return soap_in_ns1__NDFDgenLatLonListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NDFDgenByDay"))
		{	*type = SOAP_TYPE_ns1__NDFDgenByDay;
			return soap_in_ns1__NDFDgenByDay(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NDFDgenByDayResponse"))
		{	*type = SOAP_TYPE_ns1__NDFDgenByDayResponse;
			return soap_in_ns1__NDFDgenByDayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NDFDgen"))
		{	*type = SOAP_TYPE_ns1__NDFDgen;
			return soap_in_ns1__NDFDgen(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NDFDgenResponse"))
		{	*type = SOAP_TYPE_ns1__NDFDgenResponse;
			return soap_in_ns1__NDFDgenResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns2__displayLevelType:
		return soap_out_ns2__displayLevelType(soap, tag, id, (const enum ns2__displayLevelType *)ptr, "ns2:displayLevelType");
	case SOAP_TYPE_ns2__compTypeType:
		return soap_out_ns2__compTypeType(soap, tag, id, (const enum ns2__compTypeType *)ptr, "ns2:compTypeType");
	case SOAP_TYPE_ns2__featureTypeType:
		return soap_out_ns2__featureTypeType(soap, tag, id, (const enum ns2__featureTypeType *)ptr, "ns2:featureTypeType");
	case SOAP_TYPE_ns2__productType:
		return soap_out_ns2__productType(soap, tag, id, (const enum ns2__productType *)ptr, "ns2:productType");
	case SOAP_TYPE_ns2__formatType:
		return soap_out_ns2__formatType(soap, tag, id, (const enum ns2__formatType *)ptr, "ns2:formatType");
	case SOAP_TYPE_ns2__unitType:
		return soap_out_ns2__unitType(soap, tag, id, (const enum ns2__unitType *)ptr, "ns2:unitType");
	case SOAP_TYPE_ns2__sectorType:
		return soap_out_ns2__sectorType(soap, tag, id, (const enum ns2__sectorType *)ptr, "ns2:sectorType");
	case SOAP_TYPE_ns2__listCityNamesType:
		return soap_out_ns2__listCityNamesType(soap, tag, id, (const std::string *)ptr, "ns2:listCityNamesType");
	case SOAP_TYPE_ns2__zipCodeListType:
		return soap_out_ns2__zipCodeListType(soap, tag, id, (const std::string *)ptr, "ns2:zipCodeListType");
	case SOAP_TYPE_ns2__zipCodeType:
		return soap_out_ns2__zipCodeType(soap, tag, id, (const std::string *)ptr, "ns2:zipCodeType");
	case SOAP_TYPE_ns2__listLatLonType:
		return soap_out_ns2__listLatLonType(soap, tag, id, (const std::string *)ptr, "ns2:listLatLonType");
	case SOAP_TYPE_ns2__latLonPairType:
		return soap_out_ns2__latLonPairType(soap, tag, id, (const std::string *)ptr, "ns2:latLonPairType");
	case SOAP_TYPE_ns2__weatherParametersType:
		return ((ns2__weatherParametersType *)ptr)->soap_out(soap, tag, id, "ns2:weatherParametersType");
	case SOAP_TYPE_xsd__integer:
		return soap_out_xsd__integer(soap, tag, id, (const std::string *)ptr, "xsd:integer");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_xsd__date:
		return soap_out_xsd__date(soap, tag, id, (const std::string *)ptr, "xsd:date");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns1__LatLonListCityNames:
		return soap_out_ns1__LatLonListCityNames(soap, tag, id, (const struct ns1__LatLonListCityNames *)ptr, "ns1:LatLonListCityNames");
	case SOAP_TYPE_ns1__LatLonListCityNamesResponse:
		return soap_out_ns1__LatLonListCityNamesResponse(soap, tag, id, (const struct ns1__LatLonListCityNamesResponse *)ptr, "ns1:LatLonListCityNamesResponse");
	case SOAP_TYPE_ns1__CornerPoints:
		return soap_out_ns1__CornerPoints(soap, tag, id, (const struct ns1__CornerPoints *)ptr, "ns1:CornerPoints");
	case SOAP_TYPE_ns1__CornerPointsResponse:
		return soap_out_ns1__CornerPointsResponse(soap, tag, id, (const struct ns1__CornerPointsResponse *)ptr, "ns1:CornerPointsResponse");
	case SOAP_TYPE_ns1__LatLonListSquare:
		return soap_out_ns1__LatLonListSquare(soap, tag, id, (const struct ns1__LatLonListSquare *)ptr, "ns1:LatLonListSquare");
	case SOAP_TYPE_ns1__LatLonListSquareResponse:
		return soap_out_ns1__LatLonListSquareResponse(soap, tag, id, (const struct ns1__LatLonListSquareResponse *)ptr, "ns1:LatLonListSquareResponse");
	case SOAP_TYPE_ns1__LatLonListZipCode:
		return soap_out_ns1__LatLonListZipCode(soap, tag, id, (const struct ns1__LatLonListZipCode *)ptr, "ns1:LatLonListZipCode");
	case SOAP_TYPE_ns1__LatLonListZipCodeResponse:
		return soap_out_ns1__LatLonListZipCodeResponse(soap, tag, id, (const struct ns1__LatLonListZipCodeResponse *)ptr, "ns1:LatLonListZipCodeResponse");
	case SOAP_TYPE_ns1__LatLonListLine:
		return soap_out_ns1__LatLonListLine(soap, tag, id, (const struct ns1__LatLonListLine *)ptr, "ns1:LatLonListLine");
	case SOAP_TYPE_ns1__LatLonListLineResponse:
		return soap_out_ns1__LatLonListLineResponse(soap, tag, id, (const struct ns1__LatLonListLineResponse *)ptr, "ns1:LatLonListLineResponse");
	case SOAP_TYPE_ns1__LatLonListSubgrid:
		return soap_out_ns1__LatLonListSubgrid(soap, tag, id, (const struct ns1__LatLonListSubgrid *)ptr, "ns1:LatLonListSubgrid");
	case SOAP_TYPE_ns1__LatLonListSubgridResponse:
		return soap_out_ns1__LatLonListSubgridResponse(soap, tag, id, (const struct ns1__LatLonListSubgridResponse *)ptr, "ns1:LatLonListSubgridResponse");
	case SOAP_TYPE_ns1__GmlTimeSeries:
		return soap_out_ns1__GmlTimeSeries(soap, tag, id, (const struct ns1__GmlTimeSeries *)ptr, "ns1:GmlTimeSeries");
	case SOAP_TYPE_ns1__GmlTimeSeriesResponse:
		return soap_out_ns1__GmlTimeSeriesResponse(soap, tag, id, (const struct ns1__GmlTimeSeriesResponse *)ptr, "ns1:GmlTimeSeriesResponse");
	case SOAP_TYPE_ns1__GmlLatLonList:
		return soap_out_ns1__GmlLatLonList(soap, tag, id, (const struct ns1__GmlLatLonList *)ptr, "ns1:GmlLatLonList");
	case SOAP_TYPE_ns1__GmlLatLonListResponse:
		return soap_out_ns1__GmlLatLonListResponse(soap, tag, id, (const struct ns1__GmlLatLonListResponse *)ptr, "ns1:GmlLatLonListResponse");
	case SOAP_TYPE_ns1__NDFDgenByDayLatLonList:
		return soap_out_ns1__NDFDgenByDayLatLonList(soap, tag, id, (const struct ns1__NDFDgenByDayLatLonList *)ptr, "ns1:NDFDgenByDayLatLonList");
	case SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse:
		return soap_out_ns1__NDFDgenByDayLatLonListResponse(soap, tag, id, (const struct ns1__NDFDgenByDayLatLonListResponse *)ptr, "ns1:NDFDgenByDayLatLonListResponse");
	case SOAP_TYPE_ns1__NDFDgenLatLonList:
		return soap_out_ns1__NDFDgenLatLonList(soap, tag, id, (const struct ns1__NDFDgenLatLonList *)ptr, "ns1:NDFDgenLatLonList");
	case SOAP_TYPE_ns1__NDFDgenLatLonListResponse:
		return soap_out_ns1__NDFDgenLatLonListResponse(soap, tag, id, (const struct ns1__NDFDgenLatLonListResponse *)ptr, "ns1:NDFDgenLatLonListResponse");
	case SOAP_TYPE_ns1__NDFDgenByDay:
		return soap_out_ns1__NDFDgenByDay(soap, tag, id, (const struct ns1__NDFDgenByDay *)ptr, "ns1:NDFDgenByDay");
	case SOAP_TYPE_ns1__NDFDgenByDayResponse:
		return soap_out_ns1__NDFDgenByDayResponse(soap, tag, id, (const struct ns1__NDFDgenByDayResponse *)ptr, "ns1:NDFDgenByDayResponse");
	case SOAP_TYPE_ns1__NDFDgen:
		return soap_out_ns1__NDFDgen(soap, tag, id, (const struct ns1__NDFDgen *)ptr, "ns1:NDFDgen");
	case SOAP_TYPE_ns1__NDFDgenResponse:
		return soap_out_ns1__NDFDgenResponse(soap, tag, id, (const struct ns1__NDFDgenResponse *)ptr, "ns1:NDFDgenResponse");
	case SOAP_TYPE_PointerTons2__weatherParametersType:
		return soap_out_PointerTons2__weatherParametersType(soap, tag, id, (ns2__weatherParametersType *const*)ptr, "ns2:weatherParametersType");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns2__listCityNamesType:
		soap_serialize_ns2__listCityNamesType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__zipCodeListType:
		soap_serialize_ns2__zipCodeListType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__zipCodeType:
		soap_serialize_ns2__zipCodeType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__listLatLonType:
		soap_serialize_ns2__listLatLonType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__latLonPairType:
		soap_serialize_ns2__latLonPairType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__weatherParametersType:
		((ns2__weatherParametersType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__integer:
		soap_serialize_xsd__integer(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__date:
		soap_serialize_xsd__date(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListCityNames:
		soap_serialize_ns1__LatLonListCityNames(soap, (const struct ns1__LatLonListCityNames *)ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListCityNamesResponse:
		soap_serialize_ns1__LatLonListCityNamesResponse(soap, (const struct ns1__LatLonListCityNamesResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__CornerPoints:
		soap_serialize_ns1__CornerPoints(soap, (const struct ns1__CornerPoints *)ptr);
		break;
	case SOAP_TYPE_ns1__CornerPointsResponse:
		soap_serialize_ns1__CornerPointsResponse(soap, (const struct ns1__CornerPointsResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListSquare:
		soap_serialize_ns1__LatLonListSquare(soap, (const struct ns1__LatLonListSquare *)ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListSquareResponse:
		soap_serialize_ns1__LatLonListSquareResponse(soap, (const struct ns1__LatLonListSquareResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListZipCode:
		soap_serialize_ns1__LatLonListZipCode(soap, (const struct ns1__LatLonListZipCode *)ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListZipCodeResponse:
		soap_serialize_ns1__LatLonListZipCodeResponse(soap, (const struct ns1__LatLonListZipCodeResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListLine:
		soap_serialize_ns1__LatLonListLine(soap, (const struct ns1__LatLonListLine *)ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListLineResponse:
		soap_serialize_ns1__LatLonListLineResponse(soap, (const struct ns1__LatLonListLineResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListSubgrid:
		soap_serialize_ns1__LatLonListSubgrid(soap, (const struct ns1__LatLonListSubgrid *)ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListSubgridResponse:
		soap_serialize_ns1__LatLonListSubgridResponse(soap, (const struct ns1__LatLonListSubgridResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__GmlTimeSeries:
		soap_serialize_ns1__GmlTimeSeries(soap, (const struct ns1__GmlTimeSeries *)ptr);
		break;
	case SOAP_TYPE_ns1__GmlTimeSeriesResponse:
		soap_serialize_ns1__GmlTimeSeriesResponse(soap, (const struct ns1__GmlTimeSeriesResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__GmlLatLonList:
		soap_serialize_ns1__GmlLatLonList(soap, (const struct ns1__GmlLatLonList *)ptr);
		break;
	case SOAP_TYPE_ns1__GmlLatLonListResponse:
		soap_serialize_ns1__GmlLatLonListResponse(soap, (const struct ns1__GmlLatLonListResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenByDayLatLonList:
		soap_serialize_ns1__NDFDgenByDayLatLonList(soap, (const struct ns1__NDFDgenByDayLatLonList *)ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse:
		soap_serialize_ns1__NDFDgenByDayLatLonListResponse(soap, (const struct ns1__NDFDgenByDayLatLonListResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenLatLonList:
		soap_serialize_ns1__NDFDgenLatLonList(soap, (const struct ns1__NDFDgenLatLonList *)ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenLatLonListResponse:
		soap_serialize_ns1__NDFDgenLatLonListResponse(soap, (const struct ns1__NDFDgenLatLonListResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenByDay:
		soap_serialize_ns1__NDFDgenByDay(soap, (const struct ns1__NDFDgenByDay *)ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenByDayResponse:
		soap_serialize_ns1__NDFDgenByDayResponse(soap, (const struct ns1__NDFDgenByDayResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgen:
		soap_serialize_ns1__NDFDgen(soap, (const struct ns1__NDFDgen *)ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenResponse:
		soap_serialize_ns1__NDFDgenResponse(soap, (const struct ns1__NDFDgenResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTons2__weatherParametersType:
		soap_serialize_PointerTons2__weatherParametersType(soap, (ns2__weatherParametersType *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__weatherParametersType:
		return (void*)soap_instantiate_ns2__weatherParametersType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NDFDgenResponse:
		return (void*)soap_instantiate_ns1__NDFDgenResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NDFDgen:
		return (void*)soap_instantiate_ns1__NDFDgen(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NDFDgenByDayResponse:
		return (void*)soap_instantiate_ns1__NDFDgenByDayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NDFDgenByDay:
		return (void*)soap_instantiate_ns1__NDFDgenByDay(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NDFDgenLatLonListResponse:
		return (void*)soap_instantiate_ns1__NDFDgenLatLonListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NDFDgenLatLonList:
		return (void*)soap_instantiate_ns1__NDFDgenLatLonList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse:
		return (void*)soap_instantiate_ns1__NDFDgenByDayLatLonListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NDFDgenByDayLatLonList:
		return (void*)soap_instantiate_ns1__NDFDgenByDayLatLonList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GmlLatLonListResponse:
		return (void*)soap_instantiate_ns1__GmlLatLonListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GmlLatLonList:
		return (void*)soap_instantiate_ns1__GmlLatLonList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GmlTimeSeriesResponse:
		return (void*)soap_instantiate_ns1__GmlTimeSeriesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GmlTimeSeries:
		return (void*)soap_instantiate_ns1__GmlTimeSeries(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LatLonListSubgridResponse:
		return (void*)soap_instantiate_ns1__LatLonListSubgridResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LatLonListSubgrid:
		return (void*)soap_instantiate_ns1__LatLonListSubgrid(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LatLonListLineResponse:
		return (void*)soap_instantiate_ns1__LatLonListLineResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LatLonListLine:
		return (void*)soap_instantiate_ns1__LatLonListLine(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LatLonListZipCodeResponse:
		return (void*)soap_instantiate_ns1__LatLonListZipCodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LatLonListZipCode:
		return (void*)soap_instantiate_ns1__LatLonListZipCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LatLonListSquareResponse:
		return (void*)soap_instantiate_ns1__LatLonListSquareResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LatLonListSquare:
		return (void*)soap_instantiate_ns1__LatLonListSquare(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__CornerPointsResponse:
		return (void*)soap_instantiate_ns1__CornerPointsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__CornerPoints:
		return (void*)soap_instantiate_ns1__CornerPoints(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LatLonListCityNamesResponse:
		return (void*)soap_instantiate_ns1__LatLonListCityNamesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LatLonListCityNames:
		return (void*)soap_instantiate_ns1__LatLonListCityNames(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__date:
		return (void*)soap_instantiate_xsd__date(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__integer:
		return (void*)soap_instantiate_xsd__integer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__latLonPairType:
		return (void*)soap_instantiate_ns2__latLonPairType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__listLatLonType:
		return (void*)soap_instantiate_ns2__listLatLonType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__zipCodeType:
		return (void*)soap_instantiate_ns2__zipCodeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__zipCodeListType:
		return (void*)soap_instantiate_ns2__zipCodeListType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__listCityNamesType:
		return (void*)soap_instantiate_ns2__listCityNamesType(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns2__weatherParametersType:
		if (p->size < 0)
			SOAP_DELETE((ns2__weatherParametersType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns2__weatherParametersType*)p->ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__NDFDgenResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__NDFDgenResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgen:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__NDFDgen*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__NDFDgen*)p->ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenByDayResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__NDFDgenByDayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__NDFDgenByDayResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenByDay:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__NDFDgenByDay*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__NDFDgenByDay*)p->ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenLatLonListResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__NDFDgenLatLonListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__NDFDgenLatLonListResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenLatLonList:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__NDFDgenLatLonList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__NDFDgenLatLonList*)p->ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__NDFDgenByDayLatLonListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__NDFDgenByDayLatLonListResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__NDFDgenByDayLatLonList:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__NDFDgenByDayLatLonList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__NDFDgenByDayLatLonList*)p->ptr);
		break;
	case SOAP_TYPE_ns1__GmlLatLonListResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__GmlLatLonListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__GmlLatLonListResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__GmlLatLonList:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__GmlLatLonList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__GmlLatLonList*)p->ptr);
		break;
	case SOAP_TYPE_ns1__GmlTimeSeriesResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__GmlTimeSeriesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__GmlTimeSeriesResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__GmlTimeSeries:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__GmlTimeSeries*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__GmlTimeSeries*)p->ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListSubgridResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__LatLonListSubgridResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__LatLonListSubgridResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListSubgrid:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__LatLonListSubgrid*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__LatLonListSubgrid*)p->ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListLineResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__LatLonListLineResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__LatLonListLineResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListLine:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__LatLonListLine*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__LatLonListLine*)p->ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListZipCodeResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__LatLonListZipCodeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__LatLonListZipCodeResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListZipCode:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__LatLonListZipCode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__LatLonListZipCode*)p->ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListSquareResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__LatLonListSquareResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__LatLonListSquareResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListSquare:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__LatLonListSquare*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__LatLonListSquare*)p->ptr);
		break;
	case SOAP_TYPE_ns1__CornerPointsResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__CornerPointsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__CornerPointsResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__CornerPoints:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__CornerPoints*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__CornerPoints*)p->ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListCityNamesResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__LatLonListCityNamesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__LatLonListCityNamesResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns1__LatLonListCityNames:
		if (p->size < 0)
			SOAP_DELETE((struct ns1__LatLonListCityNames*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns1__LatLonListCityNames*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_xsd__date:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__integer:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns2__latLonPairType:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns2__listLatLonType:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns2__zipCodeType:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns2__zipCodeListType:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns2__listCityNamesType:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__displayLevelType(struct soap *soap, enum ns2__displayLevelType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__displayLevelType
	*a = SOAP_DEFAULT_ns2__displayLevelType;
#else
	*a = (enum ns2__displayLevelType)0;
#endif
}

static const struct soap_code_map soap_codes_ns2__displayLevelType[] =
{	{ (long)ns2__displayLevelType__1, "1" },
	{ (long)ns2__displayLevelType__2, "2" },
	{ (long)ns2__displayLevelType__3, "3" },
	{ (long)ns2__displayLevelType__4, "4" },
	{ (long)ns2__displayLevelType__12, "12" },
	{ (long)ns2__displayLevelType__34, "34" },
	{ (long)ns2__displayLevelType__1234, "1234" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__displayLevelType2s(struct soap *soap, enum ns2__displayLevelType n)
{	const char *s = soap_code_str(soap_codes_ns2__displayLevelType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__displayLevelType(struct soap *soap, const char *tag, int id, const enum ns2__displayLevelType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__displayLevelType), type) || soap_send(soap, soap_ns2__displayLevelType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__displayLevelType(struct soap *soap, const char *s, enum ns2__displayLevelType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__displayLevelType, s);
	if (map)
		*a = (enum ns2__displayLevelType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1234)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__displayLevelType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__displayLevelType * SOAP_FMAC4 soap_in_ns2__displayLevelType(struct soap *soap, const char *tag, enum ns2__displayLevelType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__displayLevelType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__displayLevelType, sizeof(enum ns2__displayLevelType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns2__displayLevelType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns2__displayLevelType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__displayLevelType, 0, sizeof(enum ns2__displayLevelType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__displayLevelType(struct soap *soap, const enum ns2__displayLevelType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__displayLevelType);
	if (soap_out_ns2__displayLevelType(soap, tag?tag:"ns2:displayLevelType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__displayLevelType * SOAP_FMAC4 soap_get_ns2__displayLevelType(struct soap *soap, enum ns2__displayLevelType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__displayLevelType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__compTypeType(struct soap *soap, enum ns2__compTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__compTypeType
	*a = SOAP_DEFAULT_ns2__compTypeType;
#else
	*a = (enum ns2__compTypeType)0;
#endif
}

static const struct soap_code_map soap_codes_ns2__compTypeType[] =
{	{ (long)ns2__compTypeType__IsEqual, "IsEqual" },
	{ (long)ns2__compTypeType__Between, "Between" },
	{ (long)ns2__compTypeType__GreaterThan, "GreaterThan" },
	{ (long)ns2__compTypeType__GreaterThanEqualTo, "GreaterThanEqualTo" },
	{ (long)ns2__compTypeType__LessThan, "LessThan" },
	{ (long)ns2__compTypeType__LessThanEqualTo, "LessThanEqualTo" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__compTypeType2s(struct soap *soap, enum ns2__compTypeType n)
{	const char *s = soap_code_str(soap_codes_ns2__compTypeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__compTypeType(struct soap *soap, const char *tag, int id, const enum ns2__compTypeType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__compTypeType), type) || soap_send(soap, soap_ns2__compTypeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__compTypeType(struct soap *soap, const char *s, enum ns2__compTypeType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__compTypeType, s);
	if (map)
		*a = (enum ns2__compTypeType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 5)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__compTypeType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__compTypeType * SOAP_FMAC4 soap_in_ns2__compTypeType(struct soap *soap, const char *tag, enum ns2__compTypeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__compTypeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__compTypeType, sizeof(enum ns2__compTypeType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns2__compTypeType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns2__compTypeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__compTypeType, 0, sizeof(enum ns2__compTypeType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__compTypeType(struct soap *soap, const enum ns2__compTypeType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__compTypeType);
	if (soap_out_ns2__compTypeType(soap, tag?tag:"ns2:compTypeType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__compTypeType * SOAP_FMAC4 soap_get_ns2__compTypeType(struct soap *soap, enum ns2__compTypeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__compTypeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__featureTypeType(struct soap *soap, enum ns2__featureTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__featureTypeType
	*a = SOAP_DEFAULT_ns2__featureTypeType;
#else
	*a = (enum ns2__featureTypeType)0;
#endif
}

static const struct soap_code_map soap_codes_ns2__featureTypeType[] =
{	{ (long)ns2__featureTypeType__Forecast_USCOREGml2Point, "Forecast_Gml2Point" },
	{ (long)ns2__featureTypeType__Forecast_USCOREGml2AllWx, "Forecast_Gml2AllWx" },
	{ (long)ns2__featureTypeType__Forecast_USCOREGmlsfPoint, "Forecast_GmlsfPoint" },
	{ (long)ns2__featureTypeType__Forecast_USCOREGmlObs, "Forecast_GmlObs" },
	{ (long)ns2__featureTypeType__NdfdMultiPointCoverage, "NdfdMultiPointCoverage" },
	{ (long)ns2__featureTypeType__Ndfd_USCOREKmlPoint, "Ndfd_KmlPoint" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__featureTypeType2s(struct soap *soap, enum ns2__featureTypeType n)
{	const char *s = soap_code_str(soap_codes_ns2__featureTypeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__featureTypeType(struct soap *soap, const char *tag, int id, const enum ns2__featureTypeType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__featureTypeType), type) || soap_send(soap, soap_ns2__featureTypeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__featureTypeType(struct soap *soap, const char *s, enum ns2__featureTypeType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__featureTypeType, s);
	if (map)
		*a = (enum ns2__featureTypeType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 5)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__featureTypeType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__featureTypeType * SOAP_FMAC4 soap_in_ns2__featureTypeType(struct soap *soap, const char *tag, enum ns2__featureTypeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__featureTypeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__featureTypeType, sizeof(enum ns2__featureTypeType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns2__featureTypeType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns2__featureTypeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__featureTypeType, 0, sizeof(enum ns2__featureTypeType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__featureTypeType(struct soap *soap, const enum ns2__featureTypeType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__featureTypeType);
	if (soap_out_ns2__featureTypeType(soap, tag?tag:"ns2:featureTypeType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__featureTypeType * SOAP_FMAC4 soap_get_ns2__featureTypeType(struct soap *soap, enum ns2__featureTypeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__featureTypeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__productType(struct soap *soap, enum ns2__productType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__productType
	*a = SOAP_DEFAULT_ns2__productType;
#else
	*a = (enum ns2__productType)0;
#endif
}

static const struct soap_code_map soap_codes_ns2__productType[] =
{	{ (long)ns2__productType__time_series, "time-series" },
	{ (long)ns2__productType__glance, "glance" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__productType2s(struct soap *soap, enum ns2__productType n)
{	const char *s = soap_code_str(soap_codes_ns2__productType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__productType(struct soap *soap, const char *tag, int id, const enum ns2__productType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__productType), type) || soap_send(soap, soap_ns2__productType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__productType(struct soap *soap, const char *s, enum ns2__productType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__productType, s);
	if (map)
		*a = (enum ns2__productType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__productType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__productType * SOAP_FMAC4 soap_in_ns2__productType(struct soap *soap, const char *tag, enum ns2__productType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__productType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__productType, sizeof(enum ns2__productType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns2__productType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns2__productType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__productType, 0, sizeof(enum ns2__productType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__productType(struct soap *soap, const enum ns2__productType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__productType);
	if (soap_out_ns2__productType(soap, tag?tag:"ns2:productType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__productType * SOAP_FMAC4 soap_get_ns2__productType(struct soap *soap, enum ns2__productType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__productType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__formatType(struct soap *soap, enum ns2__formatType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__formatType
	*a = SOAP_DEFAULT_ns2__formatType;
#else
	*a = (enum ns2__formatType)0;
#endif
}

static const struct soap_code_map soap_codes_ns2__formatType[] =
{	{ (long)ns2__formatType__24_x0020hourly, "24 hourly" },
	{ (long)ns2__formatType__12_x0020hourly, "12 hourly" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__formatType2s(struct soap *soap, enum ns2__formatType n)
{	const char *s = soap_code_str(soap_codes_ns2__formatType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__formatType(struct soap *soap, const char *tag, int id, const enum ns2__formatType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__formatType), type) || soap_send(soap, soap_ns2__formatType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__formatType(struct soap *soap, const char *s, enum ns2__formatType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__formatType, s);
	if (map)
		*a = (enum ns2__formatType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__formatType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__formatType * SOAP_FMAC4 soap_in_ns2__formatType(struct soap *soap, const char *tag, enum ns2__formatType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__formatType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__formatType, sizeof(enum ns2__formatType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns2__formatType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns2__formatType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__formatType, 0, sizeof(enum ns2__formatType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__formatType(struct soap *soap, const enum ns2__formatType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__formatType);
	if (soap_out_ns2__formatType(soap, tag?tag:"ns2:formatType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__formatType * SOAP_FMAC4 soap_get_ns2__formatType(struct soap *soap, enum ns2__formatType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__formatType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__unitType(struct soap *soap, enum ns2__unitType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__unitType
	*a = SOAP_DEFAULT_ns2__unitType;
#else
	*a = (enum ns2__unitType)0;
#endif
}

static const struct soap_code_map soap_codes_ns2__unitType[] =
{	{ (long)ns2__unitType__e, "e" },
	{ (long)ns2__unitType__m, "m" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__unitType2s(struct soap *soap, enum ns2__unitType n)
{	const char *s = soap_code_str(soap_codes_ns2__unitType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__unitType(struct soap *soap, const char *tag, int id, const enum ns2__unitType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__unitType), type) || soap_send(soap, soap_ns2__unitType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__unitType(struct soap *soap, const char *s, enum ns2__unitType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__unitType, s);
	if (map)
		*a = (enum ns2__unitType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__unitType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__unitType * SOAP_FMAC4 soap_in_ns2__unitType(struct soap *soap, const char *tag, enum ns2__unitType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__unitType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__unitType, sizeof(enum ns2__unitType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns2__unitType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns2__unitType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__unitType, 0, sizeof(enum ns2__unitType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__unitType(struct soap *soap, const enum ns2__unitType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__unitType);
	if (soap_out_ns2__unitType(soap, tag?tag:"ns2:unitType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__unitType * SOAP_FMAC4 soap_get_ns2__unitType(struct soap *soap, enum ns2__unitType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__unitType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__sectorType(struct soap *soap, enum ns2__sectorType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns2__sectorType
	*a = SOAP_DEFAULT_ns2__sectorType;
#else
	*a = (enum ns2__sectorType)0;
#endif
}

static const struct soap_code_map soap_codes_ns2__sectorType[] =
{	{ (long)ns2__sectorType__conus, "conus" },
	{ (long)ns2__sectorType__nhemi, "nhemi" },
	{ (long)ns2__sectorType__alaska, "alaska" },
	{ (long)ns2__sectorType__guam, "guam" },
	{ (long)ns2__sectorType__hawaii, "hawaii" },
	{ (long)ns2__sectorType__puertori, "puertori" },
	{ (long)ns2__sectorType__npacocn, "npacocn" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__sectorType2s(struct soap *soap, enum ns2__sectorType n)
{	const char *s = soap_code_str(soap_codes_ns2__sectorType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__sectorType(struct soap *soap, const char *tag, int id, const enum ns2__sectorType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__sectorType), type) || soap_send(soap, soap_ns2__sectorType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__sectorType(struct soap *soap, const char *s, enum ns2__sectorType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__sectorType, s);
	if (map)
		*a = (enum ns2__sectorType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 6)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__sectorType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__sectorType * SOAP_FMAC4 soap_in_ns2__sectorType(struct soap *soap, const char *tag, enum ns2__sectorType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__sectorType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__sectorType, sizeof(enum ns2__sectorType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns2__sectorType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns2__sectorType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__sectorType, 0, sizeof(enum ns2__sectorType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__sectorType(struct soap *soap, const enum ns2__sectorType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__sectorType);
	if (soap_out_ns2__sectorType(soap, tag?tag:"ns2:sectorType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__sectorType * SOAP_FMAC4 soap_get_ns2__sectorType(struct soap *soap, enum ns2__sectorType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__sectorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__listCityNamesType(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__listCityNamesType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns2__listCityNamesType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__listCityNamesType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__listCityNamesType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__listCityNamesType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns2__listCityNamesType, 0, sizeof(std::string), 0, soap_copy_ns2__listCityNamesType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__listCityNamesType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__listCityNamesType);
	if (soap_out_ns2__listCityNamesType(soap, tag?tag:"ns2:listCityNamesType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__listCityNamesType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__listCityNamesType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__zipCodeListType(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__zipCodeListType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns2__zipCodeListType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__zipCodeListType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__zipCodeListType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__zipCodeListType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns2__zipCodeListType, 0, sizeof(std::string), 0, soap_copy_ns2__zipCodeListType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__zipCodeListType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__zipCodeListType);
	if (soap_out_ns2__zipCodeListType(soap, tag?tag:"ns2:zipCodeListType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__zipCodeListType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__zipCodeListType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__zipCodeType(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__zipCodeType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns2__zipCodeType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__zipCodeType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__zipCodeType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__zipCodeType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns2__zipCodeType, 0, sizeof(std::string), 0, soap_copy_ns2__zipCodeType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__zipCodeType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__zipCodeType);
	if (soap_out_ns2__zipCodeType(soap, tag?tag:"ns2:zipCodeType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__zipCodeType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__zipCodeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__listLatLonType(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__listLatLonType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns2__listLatLonType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__listLatLonType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__listLatLonType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__listLatLonType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns2__listLatLonType, 0, sizeof(std::string), 0, soap_copy_ns2__listLatLonType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__listLatLonType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__listLatLonType);
	if (soap_out_ns2__listLatLonType(soap, tag?tag:"ns2:listLatLonType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__listLatLonType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__listLatLonType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__latLonPairType(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__latLonPairType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns2__latLonPairType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns2__latLonPairType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__latLonPairType, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns2__latLonPairType, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns2__latLonPairType, 0, sizeof(std::string), 0, soap_copy_ns2__latLonPairType);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__latLonPairType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__latLonPairType);
	if (soap_out_ns2__latLonPairType(soap, tag?tag:"ns2:latLonPairType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns2__latLonPairType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__latLonPairType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__weatherParametersType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->ns2__weatherParametersType::maxt);
	soap_default_bool(soap, &this->ns2__weatherParametersType::mint);
	soap_default_bool(soap, &this->ns2__weatherParametersType::temp);
	soap_default_bool(soap, &this->ns2__weatherParametersType::dew);
	soap_default_bool(soap, &this->ns2__weatherParametersType::pop12);
	soap_default_bool(soap, &this->ns2__weatherParametersType::qpf);
	soap_default_bool(soap, &this->ns2__weatherParametersType::sky);
	soap_default_bool(soap, &this->ns2__weatherParametersType::snow);
	soap_default_bool(soap, &this->ns2__weatherParametersType::wspd);
	soap_default_bool(soap, &this->ns2__weatherParametersType::wdir);
	soap_default_bool(soap, &this->ns2__weatherParametersType::wx);
	soap_default_bool(soap, &this->ns2__weatherParametersType::waveh);
	soap_default_bool(soap, &this->ns2__weatherParametersType::icons);
	soap_default_bool(soap, &this->ns2__weatherParametersType::rh);
	soap_default_bool(soap, &this->ns2__weatherParametersType::appt);
	soap_default_bool(soap, &this->ns2__weatherParametersType::incw34);
	soap_default_bool(soap, &this->ns2__weatherParametersType::incw50);
	soap_default_bool(soap, &this->ns2__weatherParametersType::incw64);
	soap_default_bool(soap, &this->ns2__weatherParametersType::cumw34);
	soap_default_bool(soap, &this->ns2__weatherParametersType::cumw50);
	soap_default_bool(soap, &this->ns2__weatherParametersType::cumw64);
	soap_default_bool(soap, &this->ns2__weatherParametersType::critfireo);
	soap_default_bool(soap, &this->ns2__weatherParametersType::dryfireo);
	soap_default_bool(soap, &this->ns2__weatherParametersType::conhazo);
	soap_default_bool(soap, &this->ns2__weatherParametersType::ptornado);
	soap_default_bool(soap, &this->ns2__weatherParametersType::phail);
	soap_default_bool(soap, &this->ns2__weatherParametersType::ptstmwinds);
	soap_default_bool(soap, &this->ns2__weatherParametersType::pxtornado);
	soap_default_bool(soap, &this->ns2__weatherParametersType::pxhail);
	soap_default_bool(soap, &this->ns2__weatherParametersType::pxtstmwinds);
	soap_default_bool(soap, &this->ns2__weatherParametersType::ptotsvrtstm);
	soap_default_bool(soap, &this->ns2__weatherParametersType::pxtotsvrtstm);
	soap_default_bool(soap, &this->ns2__weatherParametersType::tmpabv14d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::tmpblw14d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::tmpabv30d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::tmpblw30d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::tmpabv90d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::tmpblw90d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::prcpabv14d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::prcpblw14d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::prcpabv30d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::prcpblw30d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::prcpabv90d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::prcpblw90d);
	soap_default_bool(soap, &this->ns2__weatherParametersType::precipa_USCOREr);
	soap_default_bool(soap, &this->ns2__weatherParametersType::sky_USCOREr);
	soap_default_bool(soap, &this->ns2__weatherParametersType::td_USCOREr);
	soap_default_bool(soap, &this->ns2__weatherParametersType::temp_USCOREr);
	soap_default_bool(soap, &this->ns2__weatherParametersType::wdir_USCOREr);
	soap_default_bool(soap, &this->ns2__weatherParametersType::wspd_USCOREr);
	soap_default_bool(soap, &this->ns2__weatherParametersType::wwa);
	soap_default_bool(soap, &this->ns2__weatherParametersType::wgust);
	soap_default_bool(soap, &this->ns2__weatherParametersType::iceaccum);
	soap_default_bool(soap, &this->ns2__weatherParametersType::maxrh);
	soap_default_bool(soap, &this->ns2__weatherParametersType::minrh);
	/* transient soap skipped */
}

void ns2__weatherParametersType::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int ns2__weatherParametersType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__weatherParametersType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__weatherParametersType(struct soap *soap, const char *tag, int id, const ns2__weatherParametersType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__weatherParametersType), type))
		return soap->error;
	if (soap_out_bool(soap, "maxt", -1, &(a->ns2__weatherParametersType::maxt), ""))
		return soap->error;
	if (soap_out_bool(soap, "mint", -1, &(a->ns2__weatherParametersType::mint), ""))
		return soap->error;
	if (soap_out_bool(soap, "temp", -1, &(a->ns2__weatherParametersType::temp), ""))
		return soap->error;
	if (soap_out_bool(soap, "dew", -1, &(a->ns2__weatherParametersType::dew), ""))
		return soap->error;
	if (soap_out_bool(soap, "pop12", -1, &(a->ns2__weatherParametersType::pop12), ""))
		return soap->error;
	if (soap_out_bool(soap, "qpf", -1, &(a->ns2__weatherParametersType::qpf), ""))
		return soap->error;
	if (soap_out_bool(soap, "sky", -1, &(a->ns2__weatherParametersType::sky), ""))
		return soap->error;
	if (soap_out_bool(soap, "snow", -1, &(a->ns2__weatherParametersType::snow), ""))
		return soap->error;
	if (soap_out_bool(soap, "wspd", -1, &(a->ns2__weatherParametersType::wspd), ""))
		return soap->error;
	if (soap_out_bool(soap, "wdir", -1, &(a->ns2__weatherParametersType::wdir), ""))
		return soap->error;
	if (soap_out_bool(soap, "wx", -1, &(a->ns2__weatherParametersType::wx), ""))
		return soap->error;
	if (soap_out_bool(soap, "waveh", -1, &(a->ns2__weatherParametersType::waveh), ""))
		return soap->error;
	if (soap_out_bool(soap, "icons", -1, &(a->ns2__weatherParametersType::icons), ""))
		return soap->error;
	if (soap_out_bool(soap, "rh", -1, &(a->ns2__weatherParametersType::rh), ""))
		return soap->error;
	if (soap_out_bool(soap, "appt", -1, &(a->ns2__weatherParametersType::appt), ""))
		return soap->error;
	if (soap_out_bool(soap, "incw34", -1, &(a->ns2__weatherParametersType::incw34), ""))
		return soap->error;
	if (soap_out_bool(soap, "incw50", -1, &(a->ns2__weatherParametersType::incw50), ""))
		return soap->error;
	if (soap_out_bool(soap, "incw64", -1, &(a->ns2__weatherParametersType::incw64), ""))
		return soap->error;
	if (soap_out_bool(soap, "cumw34", -1, &(a->ns2__weatherParametersType::cumw34), ""))
		return soap->error;
	if (soap_out_bool(soap, "cumw50", -1, &(a->ns2__weatherParametersType::cumw50), ""))
		return soap->error;
	if (soap_out_bool(soap, "cumw64", -1, &(a->ns2__weatherParametersType::cumw64), ""))
		return soap->error;
	if (soap_out_bool(soap, "critfireo", -1, &(a->ns2__weatherParametersType::critfireo), ""))
		return soap->error;
	if (soap_out_bool(soap, "dryfireo", -1, &(a->ns2__weatherParametersType::dryfireo), ""))
		return soap->error;
	if (soap_out_bool(soap, "conhazo", -1, &(a->ns2__weatherParametersType::conhazo), ""))
		return soap->error;
	if (soap_out_bool(soap, "ptornado", -1, &(a->ns2__weatherParametersType::ptornado), ""))
		return soap->error;
	if (soap_out_bool(soap, "phail", -1, &(a->ns2__weatherParametersType::phail), ""))
		return soap->error;
	if (soap_out_bool(soap, "ptstmwinds", -1, &(a->ns2__weatherParametersType::ptstmwinds), ""))
		return soap->error;
	if (soap_out_bool(soap, "pxtornado", -1, &(a->ns2__weatherParametersType::pxtornado), ""))
		return soap->error;
	if (soap_out_bool(soap, "pxhail", -1, &(a->ns2__weatherParametersType::pxhail), ""))
		return soap->error;
	if (soap_out_bool(soap, "pxtstmwinds", -1, &(a->ns2__weatherParametersType::pxtstmwinds), ""))
		return soap->error;
	if (soap_out_bool(soap, "ptotsvrtstm", -1, &(a->ns2__weatherParametersType::ptotsvrtstm), ""))
		return soap->error;
	if (soap_out_bool(soap, "pxtotsvrtstm", -1, &(a->ns2__weatherParametersType::pxtotsvrtstm), ""))
		return soap->error;
	if (soap_out_bool(soap, "tmpabv14d", -1, &(a->ns2__weatherParametersType::tmpabv14d), ""))
		return soap->error;
	if (soap_out_bool(soap, "tmpblw14d", -1, &(a->ns2__weatherParametersType::tmpblw14d), ""))
		return soap->error;
	if (soap_out_bool(soap, "tmpabv30d", -1, &(a->ns2__weatherParametersType::tmpabv30d), ""))
		return soap->error;
	if (soap_out_bool(soap, "tmpblw30d", -1, &(a->ns2__weatherParametersType::tmpblw30d), ""))
		return soap->error;
	if (soap_out_bool(soap, "tmpabv90d", -1, &(a->ns2__weatherParametersType::tmpabv90d), ""))
		return soap->error;
	if (soap_out_bool(soap, "tmpblw90d", -1, &(a->ns2__weatherParametersType::tmpblw90d), ""))
		return soap->error;
	if (soap_out_bool(soap, "prcpabv14d", -1, &(a->ns2__weatherParametersType::prcpabv14d), ""))
		return soap->error;
	if (soap_out_bool(soap, "prcpblw14d", -1, &(a->ns2__weatherParametersType::prcpblw14d), ""))
		return soap->error;
	if (soap_out_bool(soap, "prcpabv30d", -1, &(a->ns2__weatherParametersType::prcpabv30d), ""))
		return soap->error;
	if (soap_out_bool(soap, "prcpblw30d", -1, &(a->ns2__weatherParametersType::prcpblw30d), ""))
		return soap->error;
	if (soap_out_bool(soap, "prcpabv90d", -1, &(a->ns2__weatherParametersType::prcpabv90d), ""))
		return soap->error;
	if (soap_out_bool(soap, "prcpblw90d", -1, &(a->ns2__weatherParametersType::prcpblw90d), ""))
		return soap->error;
	if (soap_out_bool(soap, "precipa_r", -1, &(a->ns2__weatherParametersType::precipa_USCOREr), ""))
		return soap->error;
	if (soap_out_bool(soap, "sky_r", -1, &(a->ns2__weatherParametersType::sky_USCOREr), ""))
		return soap->error;
	if (soap_out_bool(soap, "td_r", -1, &(a->ns2__weatherParametersType::td_USCOREr), ""))
		return soap->error;
	if (soap_out_bool(soap, "temp_r", -1, &(a->ns2__weatherParametersType::temp_USCOREr), ""))
		return soap->error;
	if (soap_out_bool(soap, "wdir_r", -1, &(a->ns2__weatherParametersType::wdir_USCOREr), ""))
		return soap->error;
	if (soap_out_bool(soap, "wspd_r", -1, &(a->ns2__weatherParametersType::wspd_USCOREr), ""))
		return soap->error;
	if (soap_out_bool(soap, "wwa", -1, &(a->ns2__weatherParametersType::wwa), ""))
		return soap->error;
	if (soap_out_bool(soap, "wgust", -1, &(a->ns2__weatherParametersType::wgust), ""))
		return soap->error;
	if (soap_out_bool(soap, "iceaccum", -1, &(a->ns2__weatherParametersType::iceaccum), ""))
		return soap->error;
	if (soap_out_bool(soap, "maxrh", -1, &(a->ns2__weatherParametersType::maxrh), ""))
		return soap->error;
	if (soap_out_bool(soap, "minrh", -1, &(a->ns2__weatherParametersType::minrh), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns2__weatherParametersType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__weatherParametersType(soap, tag, this, type);
}

SOAP_FMAC3 ns2__weatherParametersType * SOAP_FMAC4 soap_in_ns2__weatherParametersType(struct soap *soap, const char *tag, ns2__weatherParametersType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__weatherParametersType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__weatherParametersType, sizeof(ns2__weatherParametersType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__weatherParametersType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__weatherParametersType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_maxt1 = 1;
	size_t soap_flag_mint1 = 1;
	size_t soap_flag_temp1 = 1;
	size_t soap_flag_dew1 = 1;
	size_t soap_flag_pop121 = 1;
	size_t soap_flag_qpf1 = 1;
	size_t soap_flag_sky1 = 1;
	size_t soap_flag_snow1 = 1;
	size_t soap_flag_wspd1 = 1;
	size_t soap_flag_wdir1 = 1;
	size_t soap_flag_wx1 = 1;
	size_t soap_flag_waveh1 = 1;
	size_t soap_flag_icons1 = 1;
	size_t soap_flag_rh1 = 1;
	size_t soap_flag_appt1 = 1;
	size_t soap_flag_incw341 = 1;
	size_t soap_flag_incw501 = 1;
	size_t soap_flag_incw641 = 1;
	size_t soap_flag_cumw341 = 1;
	size_t soap_flag_cumw501 = 1;
	size_t soap_flag_cumw641 = 1;
	size_t soap_flag_critfireo1 = 1;
	size_t soap_flag_dryfireo1 = 1;
	size_t soap_flag_conhazo1 = 1;
	size_t soap_flag_ptornado1 = 1;
	size_t soap_flag_phail1 = 1;
	size_t soap_flag_ptstmwinds1 = 1;
	size_t soap_flag_pxtornado1 = 1;
	size_t soap_flag_pxhail1 = 1;
	size_t soap_flag_pxtstmwinds1 = 1;
	size_t soap_flag_ptotsvrtstm1 = 1;
	size_t soap_flag_pxtotsvrtstm1 = 1;
	size_t soap_flag_tmpabv14d1 = 1;
	size_t soap_flag_tmpblw14d1 = 1;
	size_t soap_flag_tmpabv30d1 = 1;
	size_t soap_flag_tmpblw30d1 = 1;
	size_t soap_flag_tmpabv90d1 = 1;
	size_t soap_flag_tmpblw90d1 = 1;
	size_t soap_flag_prcpabv14d1 = 1;
	size_t soap_flag_prcpblw14d1 = 1;
	size_t soap_flag_prcpabv30d1 = 1;
	size_t soap_flag_prcpblw30d1 = 1;
	size_t soap_flag_prcpabv90d1 = 1;
	size_t soap_flag_prcpblw90d1 = 1;
	size_t soap_flag_precipa_USCOREr1 = 1;
	size_t soap_flag_sky_USCOREr1 = 1;
	size_t soap_flag_td_USCOREr1 = 1;
	size_t soap_flag_temp_USCOREr1 = 1;
	size_t soap_flag_wdir_USCOREr1 = 1;
	size_t soap_flag_wspd_USCOREr1 = 1;
	size_t soap_flag_wwa1 = 1;
	size_t soap_flag_wgust1 = 1;
	size_t soap_flag_iceaccum1 = 1;
	size_t soap_flag_maxrh1 = 1;
	size_t soap_flag_minrh1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_maxt1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "maxt", &(a->ns2__weatherParametersType::maxt), "xsd:boolean"))
				{	soap_flag_maxt1--;
					continue;
				}
			if (soap_flag_mint1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "mint", &(a->ns2__weatherParametersType::mint), "xsd:boolean"))
				{	soap_flag_mint1--;
					continue;
				}
			if (soap_flag_temp1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "temp", &(a->ns2__weatherParametersType::temp), "xsd:boolean"))
				{	soap_flag_temp1--;
					continue;
				}
			if (soap_flag_dew1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "dew", &(a->ns2__weatherParametersType::dew), "xsd:boolean"))
				{	soap_flag_dew1--;
					continue;
				}
			if (soap_flag_pop121 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "pop12", &(a->ns2__weatherParametersType::pop12), "xsd:boolean"))
				{	soap_flag_pop121--;
					continue;
				}
			if (soap_flag_qpf1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "qpf", &(a->ns2__weatherParametersType::qpf), "xsd:boolean"))
				{	soap_flag_qpf1--;
					continue;
				}
			if (soap_flag_sky1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "sky", &(a->ns2__weatherParametersType::sky), "xsd:boolean"))
				{	soap_flag_sky1--;
					continue;
				}
			if (soap_flag_snow1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "snow", &(a->ns2__weatherParametersType::snow), "xsd:boolean"))
				{	soap_flag_snow1--;
					continue;
				}
			if (soap_flag_wspd1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "wspd", &(a->ns2__weatherParametersType::wspd), "xsd:boolean"))
				{	soap_flag_wspd1--;
					continue;
				}
			if (soap_flag_wdir1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "wdir", &(a->ns2__weatherParametersType::wdir), "xsd:boolean"))
				{	soap_flag_wdir1--;
					continue;
				}
			if (soap_flag_wx1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "wx", &(a->ns2__weatherParametersType::wx), "xsd:boolean"))
				{	soap_flag_wx1--;
					continue;
				}
			if (soap_flag_waveh1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "waveh", &(a->ns2__weatherParametersType::waveh), "xsd:boolean"))
				{	soap_flag_waveh1--;
					continue;
				}
			if (soap_flag_icons1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "icons", &(a->ns2__weatherParametersType::icons), "xsd:boolean"))
				{	soap_flag_icons1--;
					continue;
				}
			if (soap_flag_rh1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "rh", &(a->ns2__weatherParametersType::rh), "xsd:boolean"))
				{	soap_flag_rh1--;
					continue;
				}
			if (soap_flag_appt1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "appt", &(a->ns2__weatherParametersType::appt), "xsd:boolean"))
				{	soap_flag_appt1--;
					continue;
				}
			if (soap_flag_incw341 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "incw34", &(a->ns2__weatherParametersType::incw34), "xsd:boolean"))
				{	soap_flag_incw341--;
					continue;
				}
			if (soap_flag_incw501 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "incw50", &(a->ns2__weatherParametersType::incw50), "xsd:boolean"))
				{	soap_flag_incw501--;
					continue;
				}
			if (soap_flag_incw641 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "incw64", &(a->ns2__weatherParametersType::incw64), "xsd:boolean"))
				{	soap_flag_incw641--;
					continue;
				}
			if (soap_flag_cumw341 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "cumw34", &(a->ns2__weatherParametersType::cumw34), "xsd:boolean"))
				{	soap_flag_cumw341--;
					continue;
				}
			if (soap_flag_cumw501 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "cumw50", &(a->ns2__weatherParametersType::cumw50), "xsd:boolean"))
				{	soap_flag_cumw501--;
					continue;
				}
			if (soap_flag_cumw641 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "cumw64", &(a->ns2__weatherParametersType::cumw64), "xsd:boolean"))
				{	soap_flag_cumw641--;
					continue;
				}
			if (soap_flag_critfireo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "critfireo", &(a->ns2__weatherParametersType::critfireo), "xsd:boolean"))
				{	soap_flag_critfireo1--;
					continue;
				}
			if (soap_flag_dryfireo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "dryfireo", &(a->ns2__weatherParametersType::dryfireo), "xsd:boolean"))
				{	soap_flag_dryfireo1--;
					continue;
				}
			if (soap_flag_conhazo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "conhazo", &(a->ns2__weatherParametersType::conhazo), "xsd:boolean"))
				{	soap_flag_conhazo1--;
					continue;
				}
			if (soap_flag_ptornado1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ptornado", &(a->ns2__weatherParametersType::ptornado), "xsd:boolean"))
				{	soap_flag_ptornado1--;
					continue;
				}
			if (soap_flag_phail1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "phail", &(a->ns2__weatherParametersType::phail), "xsd:boolean"))
				{	soap_flag_phail1--;
					continue;
				}
			if (soap_flag_ptstmwinds1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ptstmwinds", &(a->ns2__weatherParametersType::ptstmwinds), "xsd:boolean"))
				{	soap_flag_ptstmwinds1--;
					continue;
				}
			if (soap_flag_pxtornado1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "pxtornado", &(a->ns2__weatherParametersType::pxtornado), "xsd:boolean"))
				{	soap_flag_pxtornado1--;
					continue;
				}
			if (soap_flag_pxhail1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "pxhail", &(a->ns2__weatherParametersType::pxhail), "xsd:boolean"))
				{	soap_flag_pxhail1--;
					continue;
				}
			if (soap_flag_pxtstmwinds1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "pxtstmwinds", &(a->ns2__weatherParametersType::pxtstmwinds), "xsd:boolean"))
				{	soap_flag_pxtstmwinds1--;
					continue;
				}
			if (soap_flag_ptotsvrtstm1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ptotsvrtstm", &(a->ns2__weatherParametersType::ptotsvrtstm), "xsd:boolean"))
				{	soap_flag_ptotsvrtstm1--;
					continue;
				}
			if (soap_flag_pxtotsvrtstm1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "pxtotsvrtstm", &(a->ns2__weatherParametersType::pxtotsvrtstm), "xsd:boolean"))
				{	soap_flag_pxtotsvrtstm1--;
					continue;
				}
			if (soap_flag_tmpabv14d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "tmpabv14d", &(a->ns2__weatherParametersType::tmpabv14d), "xsd:boolean"))
				{	soap_flag_tmpabv14d1--;
					continue;
				}
			if (soap_flag_tmpblw14d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "tmpblw14d", &(a->ns2__weatherParametersType::tmpblw14d), "xsd:boolean"))
				{	soap_flag_tmpblw14d1--;
					continue;
				}
			if (soap_flag_tmpabv30d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "tmpabv30d", &(a->ns2__weatherParametersType::tmpabv30d), "xsd:boolean"))
				{	soap_flag_tmpabv30d1--;
					continue;
				}
			if (soap_flag_tmpblw30d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "tmpblw30d", &(a->ns2__weatherParametersType::tmpblw30d), "xsd:boolean"))
				{	soap_flag_tmpblw30d1--;
					continue;
				}
			if (soap_flag_tmpabv90d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "tmpabv90d", &(a->ns2__weatherParametersType::tmpabv90d), "xsd:boolean"))
				{	soap_flag_tmpabv90d1--;
					continue;
				}
			if (soap_flag_tmpblw90d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "tmpblw90d", &(a->ns2__weatherParametersType::tmpblw90d), "xsd:boolean"))
				{	soap_flag_tmpblw90d1--;
					continue;
				}
			if (soap_flag_prcpabv14d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "prcpabv14d", &(a->ns2__weatherParametersType::prcpabv14d), "xsd:boolean"))
				{	soap_flag_prcpabv14d1--;
					continue;
				}
			if (soap_flag_prcpblw14d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "prcpblw14d", &(a->ns2__weatherParametersType::prcpblw14d), "xsd:boolean"))
				{	soap_flag_prcpblw14d1--;
					continue;
				}
			if (soap_flag_prcpabv30d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "prcpabv30d", &(a->ns2__weatherParametersType::prcpabv30d), "xsd:boolean"))
				{	soap_flag_prcpabv30d1--;
					continue;
				}
			if (soap_flag_prcpblw30d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "prcpblw30d", &(a->ns2__weatherParametersType::prcpblw30d), "xsd:boolean"))
				{	soap_flag_prcpblw30d1--;
					continue;
				}
			if (soap_flag_prcpabv90d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "prcpabv90d", &(a->ns2__weatherParametersType::prcpabv90d), "xsd:boolean"))
				{	soap_flag_prcpabv90d1--;
					continue;
				}
			if (soap_flag_prcpblw90d1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "prcpblw90d", &(a->ns2__weatherParametersType::prcpblw90d), "xsd:boolean"))
				{	soap_flag_prcpblw90d1--;
					continue;
				}
			if (soap_flag_precipa_USCOREr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "precipa_r", &(a->ns2__weatherParametersType::precipa_USCOREr), "xsd:boolean"))
				{	soap_flag_precipa_USCOREr1--;
					continue;
				}
			if (soap_flag_sky_USCOREr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "sky_r", &(a->ns2__weatherParametersType::sky_USCOREr), "xsd:boolean"))
				{	soap_flag_sky_USCOREr1--;
					continue;
				}
			if (soap_flag_td_USCOREr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "td_r", &(a->ns2__weatherParametersType::td_USCOREr), "xsd:boolean"))
				{	soap_flag_td_USCOREr1--;
					continue;
				}
			if (soap_flag_temp_USCOREr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "temp_r", &(a->ns2__weatherParametersType::temp_USCOREr), "xsd:boolean"))
				{	soap_flag_temp_USCOREr1--;
					continue;
				}
			if (soap_flag_wdir_USCOREr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "wdir_r", &(a->ns2__weatherParametersType::wdir_USCOREr), "xsd:boolean"))
				{	soap_flag_wdir_USCOREr1--;
					continue;
				}
			if (soap_flag_wspd_USCOREr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "wspd_r", &(a->ns2__weatherParametersType::wspd_USCOREr), "xsd:boolean"))
				{	soap_flag_wspd_USCOREr1--;
					continue;
				}
			if (soap_flag_wwa1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "wwa", &(a->ns2__weatherParametersType::wwa), "xsd:boolean"))
				{	soap_flag_wwa1--;
					continue;
				}
			if (soap_flag_wgust1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "wgust", &(a->ns2__weatherParametersType::wgust), "xsd:boolean"))
				{	soap_flag_wgust1--;
					continue;
				}
			if (soap_flag_iceaccum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "iceaccum", &(a->ns2__weatherParametersType::iceaccum), "xsd:boolean"))
				{	soap_flag_iceaccum1--;
					continue;
				}
			if (soap_flag_maxrh1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "maxrh", &(a->ns2__weatherParametersType::maxrh), "xsd:boolean"))
				{	soap_flag_maxrh1--;
					continue;
				}
			if (soap_flag_minrh1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "minrh", &(a->ns2__weatherParametersType::minrh), "xsd:boolean"))
				{	soap_flag_minrh1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__weatherParametersType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__weatherParametersType, 0, sizeof(ns2__weatherParametersType), 0, soap_copy_ns2__weatherParametersType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_maxt1 > 0 || soap_flag_mint1 > 0 || soap_flag_temp1 > 0 || soap_flag_dew1 > 0 || soap_flag_pop121 > 0 || soap_flag_qpf1 > 0 || soap_flag_sky1 > 0 || soap_flag_snow1 > 0 || soap_flag_wspd1 > 0 || soap_flag_wdir1 > 0 || soap_flag_wx1 > 0 || soap_flag_waveh1 > 0 || soap_flag_icons1 > 0 || soap_flag_rh1 > 0 || soap_flag_appt1 > 0 || soap_flag_incw341 > 0 || soap_flag_incw501 > 0 || soap_flag_incw641 > 0 || soap_flag_cumw341 > 0 || soap_flag_cumw501 > 0 || soap_flag_cumw641 > 0 || soap_flag_critfireo1 > 0 || soap_flag_dryfireo1 > 0 || soap_flag_conhazo1 > 0 || soap_flag_ptornado1 > 0 || soap_flag_phail1 > 0 || soap_flag_ptstmwinds1 > 0 || soap_flag_pxtornado1 > 0 || soap_flag_pxhail1 > 0 || soap_flag_pxtstmwinds1 > 0 || soap_flag_ptotsvrtstm1 > 0 || soap_flag_pxtotsvrtstm1 > 0 || soap_flag_tmpabv14d1 > 0 || soap_flag_tmpblw14d1 > 0 || soap_flag_tmpabv30d1 > 0 || soap_flag_tmpblw30d1 > 0 || soap_flag_tmpabv90d1 > 0 || soap_flag_tmpblw90d1 > 0 || soap_flag_prcpabv14d1 > 0 || soap_flag_prcpblw14d1 > 0 || soap_flag_prcpabv30d1 > 0 || soap_flag_prcpblw30d1 > 0 || soap_flag_prcpabv90d1 > 0 || soap_flag_prcpblw90d1 > 0 || soap_flag_precipa_USCOREr1 > 0 || soap_flag_sky_USCOREr1 > 0 || soap_flag_td_USCOREr1 > 0 || soap_flag_temp_USCOREr1 > 0 || soap_flag_wdir_USCOREr1 > 0 || soap_flag_wspd_USCOREr1 > 0 || soap_flag_wwa1 > 0 || soap_flag_wgust1 > 0 || soap_flag_iceaccum1 > 0 || soap_flag_maxrh1 > 0 || soap_flag_minrh1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns2__weatherParametersType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__weatherParametersType);
	if (this->soap_out(soap, tag?tag:"ns2:weatherParametersType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__weatherParametersType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__weatherParametersType(soap, this, tag, type);
}

SOAP_FMAC3 ns2__weatherParametersType * SOAP_FMAC4 soap_get_ns2__weatherParametersType(struct soap *soap, ns2__weatherParametersType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__weatherParametersType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__weatherParametersType * SOAP_FMAC2 soap_instantiate_ns2__weatherParametersType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__weatherParametersType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__weatherParametersType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns2__weatherParametersType);
		if (size)
			*size = sizeof(ns2__weatherParametersType);
		((ns2__weatherParametersType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns2__weatherParametersType, n);
		if (size)
			*size = n * sizeof(ns2__weatherParametersType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns2__weatherParametersType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns2__weatherParametersType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__weatherParametersType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__weatherParametersType %p -> %p\n", q, p));
	*(ns2__weatherParametersType*)p = *(ns2__weatherParametersType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__integer), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__integer, 0, sizeof(std::string), 0, soap_copy_xsd__integer);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__integer);
	if (soap_out_xsd__integer(soap, tag?tag:"xsd:integer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__integer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__decimal, 0, sizeof(std::string), 0, soap_copy_xsd__decimal);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__decimal);
	if (soap_out_xsd__decimal(soap, tag?tag:"xsd:decimal", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__date), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__date(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__date, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__date, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__date, 0, sizeof(std::string), 0, soap_copy_xsd__date);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__date);
	if (soap_out_xsd__date(soap, tag?tag:"xsd:date", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__date(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__date(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LatLonListCityNames(struct soap *soap, struct ns1__LatLonListCityNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__displayLevelType(soap, &a->displayLevel);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LatLonListCityNames(struct soap *soap, const struct ns1__LatLonListCityNames *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LatLonListCityNames(struct soap *soap, const char *tag, int id, const struct ns1__LatLonListCityNames *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LatLonListCityNames), type))
		return soap->error;
	if (soap_out_ns2__displayLevelType(soap, "displayLevel", -1, &a->displayLevel, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__LatLonListCityNames * SOAP_FMAC4 soap_in_ns1__LatLonListCityNames(struct soap *soap, const char *tag, struct ns1__LatLonListCityNames *a, const char *type)
{
	size_t soap_flag_displayLevel = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__LatLonListCityNames *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LatLonListCityNames, sizeof(struct ns1__LatLonListCityNames), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__LatLonListCityNames(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_displayLevel && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__displayLevelType(soap, "displayLevel", &a->displayLevel, "ns2:displayLevelType"))
				{	soap_flag_displayLevel--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__LatLonListCityNames *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LatLonListCityNames, 0, sizeof(struct ns1__LatLonListCityNames), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_displayLevel > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LatLonListCityNames(struct soap *soap, const struct ns1__LatLonListCityNames *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LatLonListCityNames);
	if (soap_out_ns1__LatLonListCityNames(soap, tag?tag:"ns1:LatLonListCityNames", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__LatLonListCityNames * SOAP_FMAC4 soap_get_ns1__LatLonListCityNames(struct soap *soap, struct ns1__LatLonListCityNames *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LatLonListCityNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__LatLonListCityNames * SOAP_FMAC2 soap_instantiate_ns1__LatLonListCityNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LatLonListCityNames(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LatLonListCityNames, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__LatLonListCityNames);
		if (size)
			*size = sizeof(struct ns1__LatLonListCityNames);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__LatLonListCityNames, n);
		if (size)
			*size = n * sizeof(struct ns1__LatLonListCityNames);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__LatLonListCityNames*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LatLonListCityNames(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__LatLonListCityNames %p -> %p\n", q, p));
	*(struct ns1__LatLonListCityNames*)p = *(struct ns1__LatLonListCityNames*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LatLonListCityNamesResponse(struct soap *soap, struct ns1__LatLonListCityNamesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__listCityNamesType(soap, &a->listCityNamesOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LatLonListCityNamesResponse(struct soap *soap, const struct ns1__LatLonListCityNamesResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__listCityNamesType(soap, &a->listCityNamesOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LatLonListCityNamesResponse(struct soap *soap, const char *tag, int id, const struct ns1__LatLonListCityNamesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LatLonListCityNamesResponse), type))
		return soap->error;
	if (soap_out_ns2__listCityNamesType(soap, "listCityNamesOut", -1, &a->listCityNamesOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__LatLonListCityNamesResponse * SOAP_FMAC4 soap_in_ns1__LatLonListCityNamesResponse(struct soap *soap, const char *tag, struct ns1__LatLonListCityNamesResponse *a, const char *type)
{
	size_t soap_flag_listCityNamesOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__LatLonListCityNamesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LatLonListCityNamesResponse, sizeof(struct ns1__LatLonListCityNamesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__LatLonListCityNamesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listCityNamesOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__listCityNamesType(soap, "listCityNamesOut", &a->listCityNamesOut, "ns2:listCityNamesType"))
				{	soap_flag_listCityNamesOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__LatLonListCityNamesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LatLonListCityNamesResponse, 0, sizeof(struct ns1__LatLonListCityNamesResponse), 0, soap_copy_ns1__LatLonListCityNamesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_listCityNamesOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LatLonListCityNamesResponse(struct soap *soap, const struct ns1__LatLonListCityNamesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LatLonListCityNamesResponse);
	if (soap_out_ns1__LatLonListCityNamesResponse(soap, tag?tag:"ns1:LatLonListCityNamesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__LatLonListCityNamesResponse * SOAP_FMAC4 soap_get_ns1__LatLonListCityNamesResponse(struct soap *soap, struct ns1__LatLonListCityNamesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LatLonListCityNamesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__LatLonListCityNamesResponse * SOAP_FMAC2 soap_instantiate_ns1__LatLonListCityNamesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LatLonListCityNamesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LatLonListCityNamesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__LatLonListCityNamesResponse);
		if (size)
			*size = sizeof(struct ns1__LatLonListCityNamesResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__LatLonListCityNamesResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__LatLonListCityNamesResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__LatLonListCityNamesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LatLonListCityNamesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__LatLonListCityNamesResponse %p -> %p\n", q, p));
	*(struct ns1__LatLonListCityNamesResponse*)p = *(struct ns1__LatLonListCityNamesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__CornerPoints(struct soap *soap, struct ns1__CornerPoints *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__sectorType(soap, &a->sector);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__CornerPoints(struct soap *soap, const struct ns1__CornerPoints *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CornerPoints(struct soap *soap, const char *tag, int id, const struct ns1__CornerPoints *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__CornerPoints), type))
		return soap->error;
	if (soap_out_ns2__sectorType(soap, "sector", -1, &a->sector, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__CornerPoints * SOAP_FMAC4 soap_in_ns1__CornerPoints(struct soap *soap, const char *tag, struct ns1__CornerPoints *a, const char *type)
{
	size_t soap_flag_sector = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__CornerPoints *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__CornerPoints, sizeof(struct ns1__CornerPoints), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__CornerPoints(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sector && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__sectorType(soap, "sector", &a->sector, "ns2:sectorType"))
				{	soap_flag_sector--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__CornerPoints *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__CornerPoints, 0, sizeof(struct ns1__CornerPoints), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sector > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__CornerPoints(struct soap *soap, const struct ns1__CornerPoints *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__CornerPoints);
	if (soap_out_ns1__CornerPoints(soap, tag?tag:"ns1:CornerPoints", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__CornerPoints * SOAP_FMAC4 soap_get_ns1__CornerPoints(struct soap *soap, struct ns1__CornerPoints *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__CornerPoints(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__CornerPoints * SOAP_FMAC2 soap_instantiate_ns1__CornerPoints(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__CornerPoints(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__CornerPoints, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__CornerPoints);
		if (size)
			*size = sizeof(struct ns1__CornerPoints);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__CornerPoints, n);
		if (size)
			*size = n * sizeof(struct ns1__CornerPoints);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__CornerPoints*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CornerPoints(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__CornerPoints %p -> %p\n", q, p));
	*(struct ns1__CornerPoints*)p = *(struct ns1__CornerPoints*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__CornerPointsResponse(struct soap *soap, struct ns1__CornerPointsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__listLatLonType(soap, &a->listLatLonOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__CornerPointsResponse(struct soap *soap, const struct ns1__CornerPointsResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__listLatLonType(soap, &a->listLatLonOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CornerPointsResponse(struct soap *soap, const char *tag, int id, const struct ns1__CornerPointsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__CornerPointsResponse), type))
		return soap->error;
	if (soap_out_ns2__listLatLonType(soap, "listLatLonOut", -1, &a->listLatLonOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__CornerPointsResponse * SOAP_FMAC4 soap_in_ns1__CornerPointsResponse(struct soap *soap, const char *tag, struct ns1__CornerPointsResponse *a, const char *type)
{
	size_t soap_flag_listLatLonOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__CornerPointsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__CornerPointsResponse, sizeof(struct ns1__CornerPointsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__CornerPointsResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listLatLonOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__listLatLonType(soap, "listLatLonOut", &a->listLatLonOut, "ns2:listLatLonType"))
				{	soap_flag_listLatLonOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__CornerPointsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__CornerPointsResponse, 0, sizeof(struct ns1__CornerPointsResponse), 0, soap_copy_ns1__CornerPointsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_listLatLonOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__CornerPointsResponse(struct soap *soap, const struct ns1__CornerPointsResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__CornerPointsResponse);
	if (soap_out_ns1__CornerPointsResponse(soap, tag?tag:"ns1:CornerPointsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__CornerPointsResponse * SOAP_FMAC4 soap_get_ns1__CornerPointsResponse(struct soap *soap, struct ns1__CornerPointsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__CornerPointsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__CornerPointsResponse * SOAP_FMAC2 soap_instantiate_ns1__CornerPointsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__CornerPointsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__CornerPointsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__CornerPointsResponse);
		if (size)
			*size = sizeof(struct ns1__CornerPointsResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__CornerPointsResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__CornerPointsResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__CornerPointsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CornerPointsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__CornerPointsResponse %p -> %p\n", q, p));
	*(struct ns1__CornerPointsResponse*)p = *(struct ns1__CornerPointsResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LatLonListSquare(struct soap *soap, struct ns1__LatLonListSquare *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__decimal(soap, &a->centerPointLat);
	soap_default_xsd__decimal(soap, &a->centerPointLon);
	soap_default_xsd__decimal(soap, &a->distanceLat);
	soap_default_xsd__decimal(soap, &a->distanceLon);
	soap_default_xsd__decimal(soap, &a->resolution);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LatLonListSquare(struct soap *soap, const struct ns1__LatLonListSquare *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &a->centerPointLat);
	soap_serialize_xsd__decimal(soap, &a->centerPointLon);
	soap_serialize_xsd__decimal(soap, &a->distanceLat);
	soap_serialize_xsd__decimal(soap, &a->distanceLon);
	soap_serialize_xsd__decimal(soap, &a->resolution);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LatLonListSquare(struct soap *soap, const char *tag, int id, const struct ns1__LatLonListSquare *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LatLonListSquare), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "centerPointLat", -1, &a->centerPointLat, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "centerPointLon", -1, &a->centerPointLon, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "distanceLat", -1, &a->distanceLat, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "distanceLon", -1, &a->distanceLon, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "resolution", -1, &a->resolution, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__LatLonListSquare * SOAP_FMAC4 soap_in_ns1__LatLonListSquare(struct soap *soap, const char *tag, struct ns1__LatLonListSquare *a, const char *type)
{
	size_t soap_flag_centerPointLat = 1;
	size_t soap_flag_centerPointLon = 1;
	size_t soap_flag_distanceLat = 1;
	size_t soap_flag_distanceLon = 1;
	size_t soap_flag_resolution = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__LatLonListSquare *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LatLonListSquare, sizeof(struct ns1__LatLonListSquare), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__LatLonListSquare(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_centerPointLat && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "centerPointLat", &a->centerPointLat, "xsd:decimal"))
				{	soap_flag_centerPointLat--;
					continue;
				}
			if (soap_flag_centerPointLon && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "centerPointLon", &a->centerPointLon, "xsd:decimal"))
				{	soap_flag_centerPointLon--;
					continue;
				}
			if (soap_flag_distanceLat && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "distanceLat", &a->distanceLat, "xsd:decimal"))
				{	soap_flag_distanceLat--;
					continue;
				}
			if (soap_flag_distanceLon && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "distanceLon", &a->distanceLon, "xsd:decimal"))
				{	soap_flag_distanceLon--;
					continue;
				}
			if (soap_flag_resolution && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "resolution", &a->resolution, "xsd:decimal"))
				{	soap_flag_resolution--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__LatLonListSquare *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LatLonListSquare, 0, sizeof(struct ns1__LatLonListSquare), 0, soap_copy_ns1__LatLonListSquare);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_centerPointLat > 0 || soap_flag_centerPointLon > 0 || soap_flag_distanceLat > 0 || soap_flag_distanceLon > 0 || soap_flag_resolution > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LatLonListSquare(struct soap *soap, const struct ns1__LatLonListSquare *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LatLonListSquare);
	if (soap_out_ns1__LatLonListSquare(soap, tag?tag:"ns1:LatLonListSquare", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__LatLonListSquare * SOAP_FMAC4 soap_get_ns1__LatLonListSquare(struct soap *soap, struct ns1__LatLonListSquare *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LatLonListSquare(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__LatLonListSquare * SOAP_FMAC2 soap_instantiate_ns1__LatLonListSquare(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LatLonListSquare(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LatLonListSquare, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__LatLonListSquare);
		if (size)
			*size = sizeof(struct ns1__LatLonListSquare);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__LatLonListSquare, n);
		if (size)
			*size = n * sizeof(struct ns1__LatLonListSquare);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__LatLonListSquare*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LatLonListSquare(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__LatLonListSquare %p -> %p\n", q, p));
	*(struct ns1__LatLonListSquare*)p = *(struct ns1__LatLonListSquare*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LatLonListSquareResponse(struct soap *soap, struct ns1__LatLonListSquareResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__listLatLonType(soap, &a->listLatLonOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LatLonListSquareResponse(struct soap *soap, const struct ns1__LatLonListSquareResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__listLatLonType(soap, &a->listLatLonOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LatLonListSquareResponse(struct soap *soap, const char *tag, int id, const struct ns1__LatLonListSquareResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LatLonListSquareResponse), type))
		return soap->error;
	if (soap_out_ns2__listLatLonType(soap, "listLatLonOut", -1, &a->listLatLonOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__LatLonListSquareResponse * SOAP_FMAC4 soap_in_ns1__LatLonListSquareResponse(struct soap *soap, const char *tag, struct ns1__LatLonListSquareResponse *a, const char *type)
{
	size_t soap_flag_listLatLonOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__LatLonListSquareResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LatLonListSquareResponse, sizeof(struct ns1__LatLonListSquareResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__LatLonListSquareResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listLatLonOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__listLatLonType(soap, "listLatLonOut", &a->listLatLonOut, "ns2:listLatLonType"))
				{	soap_flag_listLatLonOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__LatLonListSquareResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LatLonListSquareResponse, 0, sizeof(struct ns1__LatLonListSquareResponse), 0, soap_copy_ns1__LatLonListSquareResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_listLatLonOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LatLonListSquareResponse(struct soap *soap, const struct ns1__LatLonListSquareResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LatLonListSquareResponse);
	if (soap_out_ns1__LatLonListSquareResponse(soap, tag?tag:"ns1:LatLonListSquareResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__LatLonListSquareResponse * SOAP_FMAC4 soap_get_ns1__LatLonListSquareResponse(struct soap *soap, struct ns1__LatLonListSquareResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LatLonListSquareResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__LatLonListSquareResponse * SOAP_FMAC2 soap_instantiate_ns1__LatLonListSquareResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LatLonListSquareResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LatLonListSquareResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__LatLonListSquareResponse);
		if (size)
			*size = sizeof(struct ns1__LatLonListSquareResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__LatLonListSquareResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__LatLonListSquareResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__LatLonListSquareResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LatLonListSquareResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__LatLonListSquareResponse %p -> %p\n", q, p));
	*(struct ns1__LatLonListSquareResponse*)p = *(struct ns1__LatLonListSquareResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LatLonListZipCode(struct soap *soap, struct ns1__LatLonListZipCode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__zipCodeListType(soap, &a->zipCodeList);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LatLonListZipCode(struct soap *soap, const struct ns1__LatLonListZipCode *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__zipCodeListType(soap, &a->zipCodeList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LatLonListZipCode(struct soap *soap, const char *tag, int id, const struct ns1__LatLonListZipCode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LatLonListZipCode), type))
		return soap->error;
	if (soap_out_ns2__zipCodeListType(soap, "zipCodeList", -1, &a->zipCodeList, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__LatLonListZipCode * SOAP_FMAC4 soap_in_ns1__LatLonListZipCode(struct soap *soap, const char *tag, struct ns1__LatLonListZipCode *a, const char *type)
{
	size_t soap_flag_zipCodeList = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__LatLonListZipCode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LatLonListZipCode, sizeof(struct ns1__LatLonListZipCode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__LatLonListZipCode(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_zipCodeList && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__zipCodeListType(soap, "zipCodeList", &a->zipCodeList, "ns2:zipCodeListType"))
				{	soap_flag_zipCodeList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__LatLonListZipCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LatLonListZipCode, 0, sizeof(struct ns1__LatLonListZipCode), 0, soap_copy_ns1__LatLonListZipCode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_zipCodeList > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LatLonListZipCode(struct soap *soap, const struct ns1__LatLonListZipCode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LatLonListZipCode);
	if (soap_out_ns1__LatLonListZipCode(soap, tag?tag:"ns1:LatLonListZipCode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__LatLonListZipCode * SOAP_FMAC4 soap_get_ns1__LatLonListZipCode(struct soap *soap, struct ns1__LatLonListZipCode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LatLonListZipCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__LatLonListZipCode * SOAP_FMAC2 soap_instantiate_ns1__LatLonListZipCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LatLonListZipCode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LatLonListZipCode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__LatLonListZipCode);
		if (size)
			*size = sizeof(struct ns1__LatLonListZipCode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__LatLonListZipCode, n);
		if (size)
			*size = n * sizeof(struct ns1__LatLonListZipCode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__LatLonListZipCode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LatLonListZipCode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__LatLonListZipCode %p -> %p\n", q, p));
	*(struct ns1__LatLonListZipCode*)p = *(struct ns1__LatLonListZipCode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LatLonListZipCodeResponse(struct soap *soap, struct ns1__LatLonListZipCodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__listLatLonType(soap, &a->listLatLonOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LatLonListZipCodeResponse(struct soap *soap, const struct ns1__LatLonListZipCodeResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__listLatLonType(soap, &a->listLatLonOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LatLonListZipCodeResponse(struct soap *soap, const char *tag, int id, const struct ns1__LatLonListZipCodeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LatLonListZipCodeResponse), type))
		return soap->error;
	if (soap_out_ns2__listLatLonType(soap, "listLatLonOut", -1, &a->listLatLonOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__LatLonListZipCodeResponse * SOAP_FMAC4 soap_in_ns1__LatLonListZipCodeResponse(struct soap *soap, const char *tag, struct ns1__LatLonListZipCodeResponse *a, const char *type)
{
	size_t soap_flag_listLatLonOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__LatLonListZipCodeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LatLonListZipCodeResponse, sizeof(struct ns1__LatLonListZipCodeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__LatLonListZipCodeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listLatLonOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__listLatLonType(soap, "listLatLonOut", &a->listLatLonOut, "ns2:listLatLonType"))
				{	soap_flag_listLatLonOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__LatLonListZipCodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LatLonListZipCodeResponse, 0, sizeof(struct ns1__LatLonListZipCodeResponse), 0, soap_copy_ns1__LatLonListZipCodeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_listLatLonOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LatLonListZipCodeResponse(struct soap *soap, const struct ns1__LatLonListZipCodeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LatLonListZipCodeResponse);
	if (soap_out_ns1__LatLonListZipCodeResponse(soap, tag?tag:"ns1:LatLonListZipCodeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__LatLonListZipCodeResponse * SOAP_FMAC4 soap_get_ns1__LatLonListZipCodeResponse(struct soap *soap, struct ns1__LatLonListZipCodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LatLonListZipCodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__LatLonListZipCodeResponse * SOAP_FMAC2 soap_instantiate_ns1__LatLonListZipCodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LatLonListZipCodeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LatLonListZipCodeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__LatLonListZipCodeResponse);
		if (size)
			*size = sizeof(struct ns1__LatLonListZipCodeResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__LatLonListZipCodeResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__LatLonListZipCodeResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__LatLonListZipCodeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LatLonListZipCodeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__LatLonListZipCodeResponse %p -> %p\n", q, p));
	*(struct ns1__LatLonListZipCodeResponse*)p = *(struct ns1__LatLonListZipCodeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LatLonListLine(struct soap *soap, struct ns1__LatLonListLine *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__decimal(soap, &a->endPoint1Lat);
	soap_default_xsd__decimal(soap, &a->endPoint1Lon);
	soap_default_xsd__decimal(soap, &a->endPoint2Lat);
	soap_default_xsd__decimal(soap, &a->endPoint2Lon);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LatLonListLine(struct soap *soap, const struct ns1__LatLonListLine *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &a->endPoint1Lat);
	soap_serialize_xsd__decimal(soap, &a->endPoint1Lon);
	soap_serialize_xsd__decimal(soap, &a->endPoint2Lat);
	soap_serialize_xsd__decimal(soap, &a->endPoint2Lon);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LatLonListLine(struct soap *soap, const char *tag, int id, const struct ns1__LatLonListLine *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LatLonListLine), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "endPoint1Lat", -1, &a->endPoint1Lat, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "endPoint1Lon", -1, &a->endPoint1Lon, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "endPoint2Lat", -1, &a->endPoint2Lat, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "endPoint2Lon", -1, &a->endPoint2Lon, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__LatLonListLine * SOAP_FMAC4 soap_in_ns1__LatLonListLine(struct soap *soap, const char *tag, struct ns1__LatLonListLine *a, const char *type)
{
	size_t soap_flag_endPoint1Lat = 1;
	size_t soap_flag_endPoint1Lon = 1;
	size_t soap_flag_endPoint2Lat = 1;
	size_t soap_flag_endPoint2Lon = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__LatLonListLine *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LatLonListLine, sizeof(struct ns1__LatLonListLine), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__LatLonListLine(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_endPoint1Lat && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "endPoint1Lat", &a->endPoint1Lat, "xsd:decimal"))
				{	soap_flag_endPoint1Lat--;
					continue;
				}
			if (soap_flag_endPoint1Lon && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "endPoint1Lon", &a->endPoint1Lon, "xsd:decimal"))
				{	soap_flag_endPoint1Lon--;
					continue;
				}
			if (soap_flag_endPoint2Lat && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "endPoint2Lat", &a->endPoint2Lat, "xsd:decimal"))
				{	soap_flag_endPoint2Lat--;
					continue;
				}
			if (soap_flag_endPoint2Lon && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "endPoint2Lon", &a->endPoint2Lon, "xsd:decimal"))
				{	soap_flag_endPoint2Lon--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__LatLonListLine *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LatLonListLine, 0, sizeof(struct ns1__LatLonListLine), 0, soap_copy_ns1__LatLonListLine);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_endPoint1Lat > 0 || soap_flag_endPoint1Lon > 0 || soap_flag_endPoint2Lat > 0 || soap_flag_endPoint2Lon > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LatLonListLine(struct soap *soap, const struct ns1__LatLonListLine *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LatLonListLine);
	if (soap_out_ns1__LatLonListLine(soap, tag?tag:"ns1:LatLonListLine", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__LatLonListLine * SOAP_FMAC4 soap_get_ns1__LatLonListLine(struct soap *soap, struct ns1__LatLonListLine *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LatLonListLine(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__LatLonListLine * SOAP_FMAC2 soap_instantiate_ns1__LatLonListLine(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LatLonListLine(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LatLonListLine, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__LatLonListLine);
		if (size)
			*size = sizeof(struct ns1__LatLonListLine);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__LatLonListLine, n);
		if (size)
			*size = n * sizeof(struct ns1__LatLonListLine);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__LatLonListLine*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LatLonListLine(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__LatLonListLine %p -> %p\n", q, p));
	*(struct ns1__LatLonListLine*)p = *(struct ns1__LatLonListLine*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LatLonListLineResponse(struct soap *soap, struct ns1__LatLonListLineResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__listLatLonType(soap, &a->listLatLonOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LatLonListLineResponse(struct soap *soap, const struct ns1__LatLonListLineResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__listLatLonType(soap, &a->listLatLonOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LatLonListLineResponse(struct soap *soap, const char *tag, int id, const struct ns1__LatLonListLineResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LatLonListLineResponse), type))
		return soap->error;
	if (soap_out_ns2__listLatLonType(soap, "listLatLonOut", -1, &a->listLatLonOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__LatLonListLineResponse * SOAP_FMAC4 soap_in_ns1__LatLonListLineResponse(struct soap *soap, const char *tag, struct ns1__LatLonListLineResponse *a, const char *type)
{
	size_t soap_flag_listLatLonOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__LatLonListLineResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LatLonListLineResponse, sizeof(struct ns1__LatLonListLineResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__LatLonListLineResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listLatLonOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__listLatLonType(soap, "listLatLonOut", &a->listLatLonOut, "ns2:listLatLonType"))
				{	soap_flag_listLatLonOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__LatLonListLineResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LatLonListLineResponse, 0, sizeof(struct ns1__LatLonListLineResponse), 0, soap_copy_ns1__LatLonListLineResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_listLatLonOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LatLonListLineResponse(struct soap *soap, const struct ns1__LatLonListLineResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LatLonListLineResponse);
	if (soap_out_ns1__LatLonListLineResponse(soap, tag?tag:"ns1:LatLonListLineResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__LatLonListLineResponse * SOAP_FMAC4 soap_get_ns1__LatLonListLineResponse(struct soap *soap, struct ns1__LatLonListLineResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LatLonListLineResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__LatLonListLineResponse * SOAP_FMAC2 soap_instantiate_ns1__LatLonListLineResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LatLonListLineResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LatLonListLineResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__LatLonListLineResponse);
		if (size)
			*size = sizeof(struct ns1__LatLonListLineResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__LatLonListLineResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__LatLonListLineResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__LatLonListLineResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LatLonListLineResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__LatLonListLineResponse %p -> %p\n", q, p));
	*(struct ns1__LatLonListLineResponse*)p = *(struct ns1__LatLonListLineResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LatLonListSubgrid(struct soap *soap, struct ns1__LatLonListSubgrid *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__decimal(soap, &a->lowerLeftLatitude);
	soap_default_xsd__decimal(soap, &a->lowerLeftLongitude);
	soap_default_xsd__decimal(soap, &a->upperRightLatitude);
	soap_default_xsd__decimal(soap, &a->upperRightLongitude);
	soap_default_xsd__decimal(soap, &a->resolution);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LatLonListSubgrid(struct soap *soap, const struct ns1__LatLonListSubgrid *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &a->lowerLeftLatitude);
	soap_serialize_xsd__decimal(soap, &a->lowerLeftLongitude);
	soap_serialize_xsd__decimal(soap, &a->upperRightLatitude);
	soap_serialize_xsd__decimal(soap, &a->upperRightLongitude);
	soap_serialize_xsd__decimal(soap, &a->resolution);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LatLonListSubgrid(struct soap *soap, const char *tag, int id, const struct ns1__LatLonListSubgrid *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LatLonListSubgrid), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "lowerLeftLatitude", -1, &a->lowerLeftLatitude, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "lowerLeftLongitude", -1, &a->lowerLeftLongitude, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "upperRightLatitude", -1, &a->upperRightLatitude, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "upperRightLongitude", -1, &a->upperRightLongitude, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "resolution", -1, &a->resolution, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__LatLonListSubgrid * SOAP_FMAC4 soap_in_ns1__LatLonListSubgrid(struct soap *soap, const char *tag, struct ns1__LatLonListSubgrid *a, const char *type)
{
	size_t soap_flag_lowerLeftLatitude = 1;
	size_t soap_flag_lowerLeftLongitude = 1;
	size_t soap_flag_upperRightLatitude = 1;
	size_t soap_flag_upperRightLongitude = 1;
	size_t soap_flag_resolution = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__LatLonListSubgrid *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LatLonListSubgrid, sizeof(struct ns1__LatLonListSubgrid), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__LatLonListSubgrid(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_lowerLeftLatitude && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "lowerLeftLatitude", &a->lowerLeftLatitude, "xsd:decimal"))
				{	soap_flag_lowerLeftLatitude--;
					continue;
				}
			if (soap_flag_lowerLeftLongitude && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "lowerLeftLongitude", &a->lowerLeftLongitude, "xsd:decimal"))
				{	soap_flag_lowerLeftLongitude--;
					continue;
				}
			if (soap_flag_upperRightLatitude && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "upperRightLatitude", &a->upperRightLatitude, "xsd:decimal"))
				{	soap_flag_upperRightLatitude--;
					continue;
				}
			if (soap_flag_upperRightLongitude && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "upperRightLongitude", &a->upperRightLongitude, "xsd:decimal"))
				{	soap_flag_upperRightLongitude--;
					continue;
				}
			if (soap_flag_resolution && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "resolution", &a->resolution, "xsd:decimal"))
				{	soap_flag_resolution--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__LatLonListSubgrid *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LatLonListSubgrid, 0, sizeof(struct ns1__LatLonListSubgrid), 0, soap_copy_ns1__LatLonListSubgrid);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_lowerLeftLatitude > 0 || soap_flag_lowerLeftLongitude > 0 || soap_flag_upperRightLatitude > 0 || soap_flag_upperRightLongitude > 0 || soap_flag_resolution > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LatLonListSubgrid(struct soap *soap, const struct ns1__LatLonListSubgrid *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LatLonListSubgrid);
	if (soap_out_ns1__LatLonListSubgrid(soap, tag?tag:"ns1:LatLonListSubgrid", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__LatLonListSubgrid * SOAP_FMAC4 soap_get_ns1__LatLonListSubgrid(struct soap *soap, struct ns1__LatLonListSubgrid *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LatLonListSubgrid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__LatLonListSubgrid * SOAP_FMAC2 soap_instantiate_ns1__LatLonListSubgrid(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LatLonListSubgrid(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LatLonListSubgrid, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__LatLonListSubgrid);
		if (size)
			*size = sizeof(struct ns1__LatLonListSubgrid);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__LatLonListSubgrid, n);
		if (size)
			*size = n * sizeof(struct ns1__LatLonListSubgrid);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__LatLonListSubgrid*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LatLonListSubgrid(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__LatLonListSubgrid %p -> %p\n", q, p));
	*(struct ns1__LatLonListSubgrid*)p = *(struct ns1__LatLonListSubgrid*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LatLonListSubgridResponse(struct soap *soap, struct ns1__LatLonListSubgridResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__listLatLonType(soap, &a->listLatLonOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LatLonListSubgridResponse(struct soap *soap, const struct ns1__LatLonListSubgridResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__listLatLonType(soap, &a->listLatLonOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LatLonListSubgridResponse(struct soap *soap, const char *tag, int id, const struct ns1__LatLonListSubgridResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LatLonListSubgridResponse), type))
		return soap->error;
	if (soap_out_ns2__listLatLonType(soap, "listLatLonOut", -1, &a->listLatLonOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__LatLonListSubgridResponse * SOAP_FMAC4 soap_in_ns1__LatLonListSubgridResponse(struct soap *soap, const char *tag, struct ns1__LatLonListSubgridResponse *a, const char *type)
{
	size_t soap_flag_listLatLonOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__LatLonListSubgridResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LatLonListSubgridResponse, sizeof(struct ns1__LatLonListSubgridResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__LatLonListSubgridResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listLatLonOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__listLatLonType(soap, "listLatLonOut", &a->listLatLonOut, "ns2:listLatLonType"))
				{	soap_flag_listLatLonOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__LatLonListSubgridResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LatLonListSubgridResponse, 0, sizeof(struct ns1__LatLonListSubgridResponse), 0, soap_copy_ns1__LatLonListSubgridResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_listLatLonOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LatLonListSubgridResponse(struct soap *soap, const struct ns1__LatLonListSubgridResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LatLonListSubgridResponse);
	if (soap_out_ns1__LatLonListSubgridResponse(soap, tag?tag:"ns1:LatLonListSubgridResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__LatLonListSubgridResponse * SOAP_FMAC4 soap_get_ns1__LatLonListSubgridResponse(struct soap *soap, struct ns1__LatLonListSubgridResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LatLonListSubgridResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__LatLonListSubgridResponse * SOAP_FMAC2 soap_instantiate_ns1__LatLonListSubgridResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LatLonListSubgridResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LatLonListSubgridResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__LatLonListSubgridResponse);
		if (size)
			*size = sizeof(struct ns1__LatLonListSubgridResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__LatLonListSubgridResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__LatLonListSubgridResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__LatLonListSubgridResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LatLonListSubgridResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__LatLonListSubgridResponse %p -> %p\n", q, p));
	*(struct ns1__LatLonListSubgridResponse*)p = *(struct ns1__LatLonListSubgridResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GmlTimeSeries(struct soap *soap, struct ns1__GmlTimeSeries *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__listLatLonType(soap, &a->listLatLon);
	soap_default_time(soap, &a->startTime);
	soap_default_time(soap, &a->endTime);
	soap_default_ns2__compTypeType(soap, &a->compType);
	soap_default_ns2__featureTypeType(soap, &a->featureType);
	soap_default_std__string(soap, &a->propertyName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GmlTimeSeries(struct soap *soap, const struct ns1__GmlTimeSeries *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__listLatLonType(soap, &a->listLatLon);
	soap_serialize_std__string(soap, &a->propertyName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GmlTimeSeries(struct soap *soap, const char *tag, int id, const struct ns1__GmlTimeSeries *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GmlTimeSeries), type))
		return soap->error;
	if (soap_out_ns2__listLatLonType(soap, "listLatLon", -1, &a->listLatLon, ""))
		return soap->error;
	if (soap_out_time(soap, "startTime", -1, &a->startTime, ""))
		return soap->error;
	if (soap_out_time(soap, "endTime", -1, &a->endTime, ""))
		return soap->error;
	if (soap_out_ns2__compTypeType(soap, "compType", -1, &a->compType, ""))
		return soap->error;
	if (soap_out_ns2__featureTypeType(soap, "featureType", -1, &a->featureType, ""))
		return soap->error;
	if (soap_out_std__string(soap, "propertyName", -1, &a->propertyName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__GmlTimeSeries * SOAP_FMAC4 soap_in_ns1__GmlTimeSeries(struct soap *soap, const char *tag, struct ns1__GmlTimeSeries *a, const char *type)
{
	size_t soap_flag_listLatLon = 1;
	size_t soap_flag_startTime = 1;
	size_t soap_flag_endTime = 1;
	size_t soap_flag_compType = 1;
	size_t soap_flag_featureType = 1;
	size_t soap_flag_propertyName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__GmlTimeSeries *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GmlTimeSeries, sizeof(struct ns1__GmlTimeSeries), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__GmlTimeSeries(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listLatLon && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__listLatLonType(soap, "listLatLon", &a->listLatLon, "ns2:listLatLonType"))
				{	soap_flag_listLatLon--;
					continue;
				}
			if (soap_flag_startTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "startTime", &a->startTime, "xsd:dateTime"))
				{	soap_flag_startTime--;
					continue;
				}
			if (soap_flag_endTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "endTime", &a->endTime, "xsd:dateTime"))
				{	soap_flag_endTime--;
					continue;
				}
			if (soap_flag_compType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__compTypeType(soap, "compType", &a->compType, "ns2:compTypeType"))
				{	soap_flag_compType--;
					continue;
				}
			if (soap_flag_featureType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__featureTypeType(soap, "featureType", &a->featureType, "ns2:featureTypeType"))
				{	soap_flag_featureType--;
					continue;
				}
			if (soap_flag_propertyName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "propertyName", &a->propertyName, "xsd:string"))
				{	soap_flag_propertyName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__GmlTimeSeries *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GmlTimeSeries, 0, sizeof(struct ns1__GmlTimeSeries), 0, soap_copy_ns1__GmlTimeSeries);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_listLatLon > 0 || soap_flag_startTime > 0 || soap_flag_endTime > 0 || soap_flag_compType > 0 || soap_flag_featureType > 0 || soap_flag_propertyName > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GmlTimeSeries(struct soap *soap, const struct ns1__GmlTimeSeries *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__GmlTimeSeries);
	if (soap_out_ns1__GmlTimeSeries(soap, tag?tag:"ns1:GmlTimeSeries", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__GmlTimeSeries * SOAP_FMAC4 soap_get_ns1__GmlTimeSeries(struct soap *soap, struct ns1__GmlTimeSeries *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GmlTimeSeries(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__GmlTimeSeries * SOAP_FMAC2 soap_instantiate_ns1__GmlTimeSeries(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GmlTimeSeries(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__GmlTimeSeries, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__GmlTimeSeries);
		if (size)
			*size = sizeof(struct ns1__GmlTimeSeries);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__GmlTimeSeries, n);
		if (size)
			*size = n * sizeof(struct ns1__GmlTimeSeries);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__GmlTimeSeries*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GmlTimeSeries(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__GmlTimeSeries %p -> %p\n", q, p));
	*(struct ns1__GmlTimeSeries*)p = *(struct ns1__GmlTimeSeries*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GmlTimeSeriesResponse(struct soap *soap, struct ns1__GmlTimeSeriesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->dwGmlOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GmlTimeSeriesResponse(struct soap *soap, const struct ns1__GmlTimeSeriesResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->dwGmlOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GmlTimeSeriesResponse(struct soap *soap, const char *tag, int id, const struct ns1__GmlTimeSeriesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GmlTimeSeriesResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "dwGmlOut", -1, &a->dwGmlOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__GmlTimeSeriesResponse * SOAP_FMAC4 soap_in_ns1__GmlTimeSeriesResponse(struct soap *soap, const char *tag, struct ns1__GmlTimeSeriesResponse *a, const char *type)
{
	size_t soap_flag_dwGmlOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__GmlTimeSeriesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GmlTimeSeriesResponse, sizeof(struct ns1__GmlTimeSeriesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__GmlTimeSeriesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dwGmlOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "dwGmlOut", &a->dwGmlOut, "xsd:string"))
				{	soap_flag_dwGmlOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__GmlTimeSeriesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GmlTimeSeriesResponse, 0, sizeof(struct ns1__GmlTimeSeriesResponse), 0, soap_copy_ns1__GmlTimeSeriesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_dwGmlOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GmlTimeSeriesResponse(struct soap *soap, const struct ns1__GmlTimeSeriesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__GmlTimeSeriesResponse);
	if (soap_out_ns1__GmlTimeSeriesResponse(soap, tag?tag:"ns1:GmlTimeSeriesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__GmlTimeSeriesResponse * SOAP_FMAC4 soap_get_ns1__GmlTimeSeriesResponse(struct soap *soap, struct ns1__GmlTimeSeriesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GmlTimeSeriesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__GmlTimeSeriesResponse * SOAP_FMAC2 soap_instantiate_ns1__GmlTimeSeriesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GmlTimeSeriesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__GmlTimeSeriesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__GmlTimeSeriesResponse);
		if (size)
			*size = sizeof(struct ns1__GmlTimeSeriesResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__GmlTimeSeriesResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__GmlTimeSeriesResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__GmlTimeSeriesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GmlTimeSeriesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__GmlTimeSeriesResponse %p -> %p\n", q, p));
	*(struct ns1__GmlTimeSeriesResponse*)p = *(struct ns1__GmlTimeSeriesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GmlLatLonList(struct soap *soap, struct ns1__GmlLatLonList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__listLatLonType(soap, &a->listLatLon);
	soap_default_time(soap, &a->requestedTime);
	soap_default_ns2__featureTypeType(soap, &a->featureType);
	a->weatherParameters = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GmlLatLonList(struct soap *soap, const struct ns1__GmlLatLonList *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__listLatLonType(soap, &a->listLatLon);
	soap_serialize_PointerTons2__weatherParametersType(soap, &a->weatherParameters);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GmlLatLonList(struct soap *soap, const char *tag, int id, const struct ns1__GmlLatLonList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GmlLatLonList), type))
		return soap->error;
	if (soap_out_ns2__listLatLonType(soap, "listLatLon", -1, &a->listLatLon, ""))
		return soap->error;
	if (soap_out_time(soap, "requestedTime", -1, &a->requestedTime, ""))
		return soap->error;
	if (soap_out_ns2__featureTypeType(soap, "featureType", -1, &a->featureType, ""))
		return soap->error;
	if (soap_out_PointerTons2__weatherParametersType(soap, "weatherParameters", -1, &a->weatherParameters, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__GmlLatLonList * SOAP_FMAC4 soap_in_ns1__GmlLatLonList(struct soap *soap, const char *tag, struct ns1__GmlLatLonList *a, const char *type)
{
	size_t soap_flag_listLatLon = 1;
	size_t soap_flag_requestedTime = 1;
	size_t soap_flag_featureType = 1;
	size_t soap_flag_weatherParameters = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__GmlLatLonList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GmlLatLonList, sizeof(struct ns1__GmlLatLonList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__GmlLatLonList(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listLatLon && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__listLatLonType(soap, "listLatLon", &a->listLatLon, "ns2:listLatLonType"))
				{	soap_flag_listLatLon--;
					continue;
				}
			if (soap_flag_requestedTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "requestedTime", &a->requestedTime, "xsd:dateTime"))
				{	soap_flag_requestedTime--;
					continue;
				}
			if (soap_flag_featureType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__featureTypeType(soap, "featureType", &a->featureType, "ns2:featureTypeType"))
				{	soap_flag_featureType--;
					continue;
				}
			if (soap_flag_weatherParameters && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__weatherParametersType(soap, "weatherParameters", &a->weatherParameters, "ns2:weatherParametersType"))
				{	soap_flag_weatherParameters--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__GmlLatLonList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GmlLatLonList, 0, sizeof(struct ns1__GmlLatLonList), 0, soap_copy_ns1__GmlLatLonList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_listLatLon > 0 || soap_flag_requestedTime > 0 || soap_flag_featureType > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GmlLatLonList(struct soap *soap, const struct ns1__GmlLatLonList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__GmlLatLonList);
	if (soap_out_ns1__GmlLatLonList(soap, tag?tag:"ns1:GmlLatLonList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__GmlLatLonList * SOAP_FMAC4 soap_get_ns1__GmlLatLonList(struct soap *soap, struct ns1__GmlLatLonList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GmlLatLonList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__GmlLatLonList * SOAP_FMAC2 soap_instantiate_ns1__GmlLatLonList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GmlLatLonList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__GmlLatLonList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__GmlLatLonList);
		if (size)
			*size = sizeof(struct ns1__GmlLatLonList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__GmlLatLonList, n);
		if (size)
			*size = n * sizeof(struct ns1__GmlLatLonList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__GmlLatLonList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GmlLatLonList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__GmlLatLonList %p -> %p\n", q, p));
	*(struct ns1__GmlLatLonList*)p = *(struct ns1__GmlLatLonList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GmlLatLonListResponse(struct soap *soap, struct ns1__GmlLatLonListResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->dwGmlOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GmlLatLonListResponse(struct soap *soap, const struct ns1__GmlLatLonListResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->dwGmlOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GmlLatLonListResponse(struct soap *soap, const char *tag, int id, const struct ns1__GmlLatLonListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GmlLatLonListResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "dwGmlOut", -1, &a->dwGmlOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__GmlLatLonListResponse * SOAP_FMAC4 soap_in_ns1__GmlLatLonListResponse(struct soap *soap, const char *tag, struct ns1__GmlLatLonListResponse *a, const char *type)
{
	size_t soap_flag_dwGmlOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__GmlLatLonListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GmlLatLonListResponse, sizeof(struct ns1__GmlLatLonListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__GmlLatLonListResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dwGmlOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "dwGmlOut", &a->dwGmlOut, "xsd:string"))
				{	soap_flag_dwGmlOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__GmlLatLonListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GmlLatLonListResponse, 0, sizeof(struct ns1__GmlLatLonListResponse), 0, soap_copy_ns1__GmlLatLonListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_dwGmlOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GmlLatLonListResponse(struct soap *soap, const struct ns1__GmlLatLonListResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__GmlLatLonListResponse);
	if (soap_out_ns1__GmlLatLonListResponse(soap, tag?tag:"ns1:GmlLatLonListResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__GmlLatLonListResponse * SOAP_FMAC4 soap_get_ns1__GmlLatLonListResponse(struct soap *soap, struct ns1__GmlLatLonListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GmlLatLonListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__GmlLatLonListResponse * SOAP_FMAC2 soap_instantiate_ns1__GmlLatLonListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GmlLatLonListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__GmlLatLonListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__GmlLatLonListResponse);
		if (size)
			*size = sizeof(struct ns1__GmlLatLonListResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__GmlLatLonListResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__GmlLatLonListResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__GmlLatLonListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GmlLatLonListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__GmlLatLonListResponse %p -> %p\n", q, p));
	*(struct ns1__GmlLatLonListResponse*)p = *(struct ns1__GmlLatLonListResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NDFDgenByDayLatLonList(struct soap *soap, struct ns1__NDFDgenByDayLatLonList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__listLatLonType(soap, &a->listLatLon);
	soap_default_xsd__date(soap, &a->startDate);
	soap_default_xsd__integer(soap, &a->numDays);
	soap_default_ns2__unitType(soap, &a->Unit);
	soap_default_ns2__formatType(soap, &a->format);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NDFDgenByDayLatLonList(struct soap *soap, const struct ns1__NDFDgenByDayLatLonList *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__listLatLonType(soap, &a->listLatLon);
	soap_serialize_xsd__date(soap, &a->startDate);
	soap_serialize_xsd__integer(soap, &a->numDays);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NDFDgenByDayLatLonList(struct soap *soap, const char *tag, int id, const struct ns1__NDFDgenByDayLatLonList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NDFDgenByDayLatLonList), type))
		return soap->error;
	if (soap_out_ns2__listLatLonType(soap, "listLatLon", -1, &a->listLatLon, ""))
		return soap->error;
	if (soap_out_xsd__date(soap, "startDate", -1, &a->startDate, ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "numDays", -1, &a->numDays, ""))
		return soap->error;
	if (soap_out_ns2__unitType(soap, "Unit", -1, &a->Unit, ""))
		return soap->error;
	if (soap_out_ns2__formatType(soap, "format", -1, &a->format, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__NDFDgenByDayLatLonList * SOAP_FMAC4 soap_in_ns1__NDFDgenByDayLatLonList(struct soap *soap, const char *tag, struct ns1__NDFDgenByDayLatLonList *a, const char *type)
{
	size_t soap_flag_listLatLon = 1;
	size_t soap_flag_startDate = 1;
	size_t soap_flag_numDays = 1;
	size_t soap_flag_Unit = 1;
	size_t soap_flag_format = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__NDFDgenByDayLatLonList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NDFDgenByDayLatLonList, sizeof(struct ns1__NDFDgenByDayLatLonList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__NDFDgenByDayLatLonList(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listLatLon && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__listLatLonType(soap, "listLatLon", &a->listLatLon, "ns2:listLatLonType"))
				{	soap_flag_listLatLon--;
					continue;
				}
			if (soap_flag_startDate && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__date(soap, "startDate", &a->startDate, "xsd:date"))
				{	soap_flag_startDate--;
					continue;
				}
			if (soap_flag_numDays && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "numDays", &a->numDays, "xsd:integer"))
				{	soap_flag_numDays--;
					continue;
				}
			if (soap_flag_Unit && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__unitType(soap, "Unit", &a->Unit, "ns2:unitType"))
				{	soap_flag_Unit--;
					continue;
				}
			if (soap_flag_format && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__formatType(soap, "format", &a->format, "ns2:formatType"))
				{	soap_flag_format--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__NDFDgenByDayLatLonList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NDFDgenByDayLatLonList, 0, sizeof(struct ns1__NDFDgenByDayLatLonList), 0, soap_copy_ns1__NDFDgenByDayLatLonList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_listLatLon > 0 || soap_flag_startDate > 0 || soap_flag_numDays > 0 || soap_flag_Unit > 0 || soap_flag_format > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NDFDgenByDayLatLonList(struct soap *soap, const struct ns1__NDFDgenByDayLatLonList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__NDFDgenByDayLatLonList);
	if (soap_out_ns1__NDFDgenByDayLatLonList(soap, tag?tag:"ns1:NDFDgenByDayLatLonList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__NDFDgenByDayLatLonList * SOAP_FMAC4 soap_get_ns1__NDFDgenByDayLatLonList(struct soap *soap, struct ns1__NDFDgenByDayLatLonList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NDFDgenByDayLatLonList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__NDFDgenByDayLatLonList * SOAP_FMAC2 soap_instantiate_ns1__NDFDgenByDayLatLonList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NDFDgenByDayLatLonList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__NDFDgenByDayLatLonList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__NDFDgenByDayLatLonList);
		if (size)
			*size = sizeof(struct ns1__NDFDgenByDayLatLonList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__NDFDgenByDayLatLonList, n);
		if (size)
			*size = n * sizeof(struct ns1__NDFDgenByDayLatLonList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__NDFDgenByDayLatLonList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NDFDgenByDayLatLonList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__NDFDgenByDayLatLonList %p -> %p\n", q, p));
	*(struct ns1__NDFDgenByDayLatLonList*)p = *(struct ns1__NDFDgenByDayLatLonList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NDFDgenByDayLatLonListResponse(struct soap *soap, struct ns1__NDFDgenByDayLatLonListResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->dwmlByDayOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NDFDgenByDayLatLonListResponse(struct soap *soap, const struct ns1__NDFDgenByDayLatLonListResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->dwmlByDayOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NDFDgenByDayLatLonListResponse(struct soap *soap, const char *tag, int id, const struct ns1__NDFDgenByDayLatLonListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "dwmlByDayOut", -1, &a->dwmlByDayOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__NDFDgenByDayLatLonListResponse * SOAP_FMAC4 soap_in_ns1__NDFDgenByDayLatLonListResponse(struct soap *soap, const char *tag, struct ns1__NDFDgenByDayLatLonListResponse *a, const char *type)
{
	size_t soap_flag_dwmlByDayOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__NDFDgenByDayLatLonListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse, sizeof(struct ns1__NDFDgenByDayLatLonListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__NDFDgenByDayLatLonListResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dwmlByDayOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "dwmlByDayOut", &a->dwmlByDayOut, "xsd:string"))
				{	soap_flag_dwmlByDayOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__NDFDgenByDayLatLonListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse, 0, sizeof(struct ns1__NDFDgenByDayLatLonListResponse), 0, soap_copy_ns1__NDFDgenByDayLatLonListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_dwmlByDayOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NDFDgenByDayLatLonListResponse(struct soap *soap, const struct ns1__NDFDgenByDayLatLonListResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse);
	if (soap_out_ns1__NDFDgenByDayLatLonListResponse(soap, tag?tag:"ns1:NDFDgenByDayLatLonListResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__NDFDgenByDayLatLonListResponse * SOAP_FMAC4 soap_get_ns1__NDFDgenByDayLatLonListResponse(struct soap *soap, struct ns1__NDFDgenByDayLatLonListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NDFDgenByDayLatLonListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__NDFDgenByDayLatLonListResponse * SOAP_FMAC2 soap_instantiate_ns1__NDFDgenByDayLatLonListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NDFDgenByDayLatLonListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__NDFDgenByDayLatLonListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__NDFDgenByDayLatLonListResponse);
		if (size)
			*size = sizeof(struct ns1__NDFDgenByDayLatLonListResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__NDFDgenByDayLatLonListResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__NDFDgenByDayLatLonListResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__NDFDgenByDayLatLonListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NDFDgenByDayLatLonListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__NDFDgenByDayLatLonListResponse %p -> %p\n", q, p));
	*(struct ns1__NDFDgenByDayLatLonListResponse*)p = *(struct ns1__NDFDgenByDayLatLonListResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NDFDgenLatLonList(struct soap *soap, struct ns1__NDFDgenLatLonList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__listLatLonType(soap, &a->listLatLon);
	soap_default_ns2__productType(soap, &a->product);
	soap_default_time(soap, &a->startTime);
	soap_default_time(soap, &a->endTime);
	soap_default_ns2__unitType(soap, &a->Unit);
	a->weatherParameters = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NDFDgenLatLonList(struct soap *soap, const struct ns1__NDFDgenLatLonList *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_ns2__listLatLonType(soap, &a->listLatLon);
	soap_serialize_PointerTons2__weatherParametersType(soap, &a->weatherParameters);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NDFDgenLatLonList(struct soap *soap, const char *tag, int id, const struct ns1__NDFDgenLatLonList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NDFDgenLatLonList), type))
		return soap->error;
	if (soap_out_ns2__listLatLonType(soap, "listLatLon", -1, &a->listLatLon, ""))
		return soap->error;
	if (soap_out_ns2__productType(soap, "product", -1, &a->product, ""))
		return soap->error;
	if (soap_out_time(soap, "startTime", -1, &a->startTime, ""))
		return soap->error;
	if (soap_out_time(soap, "endTime", -1, &a->endTime, ""))
		return soap->error;
	if (soap_out_ns2__unitType(soap, "Unit", -1, &a->Unit, ""))
		return soap->error;
	if (soap_out_PointerTons2__weatherParametersType(soap, "weatherParameters", -1, &a->weatherParameters, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__NDFDgenLatLonList * SOAP_FMAC4 soap_in_ns1__NDFDgenLatLonList(struct soap *soap, const char *tag, struct ns1__NDFDgenLatLonList *a, const char *type)
{
	size_t soap_flag_listLatLon = 1;
	size_t soap_flag_product = 1;
	size_t soap_flag_startTime = 1;
	size_t soap_flag_endTime = 1;
	size_t soap_flag_Unit = 1;
	size_t soap_flag_weatherParameters = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__NDFDgenLatLonList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NDFDgenLatLonList, sizeof(struct ns1__NDFDgenLatLonList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__NDFDgenLatLonList(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_listLatLon && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_ns2__listLatLonType(soap, "listLatLon", &a->listLatLon, "ns2:listLatLonType"))
				{	soap_flag_listLatLon--;
					continue;
				}
			if (soap_flag_product && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__productType(soap, "product", &a->product, "ns2:productType"))
				{	soap_flag_product--;
					continue;
				}
			if (soap_flag_startTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "startTime", &a->startTime, "xsd:dateTime"))
				{	soap_flag_startTime--;
					continue;
				}
			if (soap_flag_endTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "endTime", &a->endTime, "xsd:dateTime"))
				{	soap_flag_endTime--;
					continue;
				}
			if (soap_flag_Unit && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__unitType(soap, "Unit", &a->Unit, "ns2:unitType"))
				{	soap_flag_Unit--;
					continue;
				}
			if (soap_flag_weatherParameters && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__weatherParametersType(soap, "weatherParameters", &a->weatherParameters, "ns2:weatherParametersType"))
				{	soap_flag_weatherParameters--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__NDFDgenLatLonList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NDFDgenLatLonList, 0, sizeof(struct ns1__NDFDgenLatLonList), 0, soap_copy_ns1__NDFDgenLatLonList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_listLatLon > 0 || soap_flag_product > 0 || soap_flag_startTime > 0 || soap_flag_endTime > 0 || soap_flag_Unit > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NDFDgenLatLonList(struct soap *soap, const struct ns1__NDFDgenLatLonList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__NDFDgenLatLonList);
	if (soap_out_ns1__NDFDgenLatLonList(soap, tag?tag:"ns1:NDFDgenLatLonList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__NDFDgenLatLonList * SOAP_FMAC4 soap_get_ns1__NDFDgenLatLonList(struct soap *soap, struct ns1__NDFDgenLatLonList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NDFDgenLatLonList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__NDFDgenLatLonList * SOAP_FMAC2 soap_instantiate_ns1__NDFDgenLatLonList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NDFDgenLatLonList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__NDFDgenLatLonList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__NDFDgenLatLonList);
		if (size)
			*size = sizeof(struct ns1__NDFDgenLatLonList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__NDFDgenLatLonList, n);
		if (size)
			*size = n * sizeof(struct ns1__NDFDgenLatLonList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__NDFDgenLatLonList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NDFDgenLatLonList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__NDFDgenLatLonList %p -> %p\n", q, p));
	*(struct ns1__NDFDgenLatLonList*)p = *(struct ns1__NDFDgenLatLonList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NDFDgenLatLonListResponse(struct soap *soap, struct ns1__NDFDgenLatLonListResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->dwmlOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NDFDgenLatLonListResponse(struct soap *soap, const struct ns1__NDFDgenLatLonListResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->dwmlOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NDFDgenLatLonListResponse(struct soap *soap, const char *tag, int id, const struct ns1__NDFDgenLatLonListResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NDFDgenLatLonListResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "dwmlOut", -1, &a->dwmlOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__NDFDgenLatLonListResponse * SOAP_FMAC4 soap_in_ns1__NDFDgenLatLonListResponse(struct soap *soap, const char *tag, struct ns1__NDFDgenLatLonListResponse *a, const char *type)
{
	size_t soap_flag_dwmlOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__NDFDgenLatLonListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NDFDgenLatLonListResponse, sizeof(struct ns1__NDFDgenLatLonListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__NDFDgenLatLonListResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dwmlOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "dwmlOut", &a->dwmlOut, "xsd:string"))
				{	soap_flag_dwmlOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__NDFDgenLatLonListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NDFDgenLatLonListResponse, 0, sizeof(struct ns1__NDFDgenLatLonListResponse), 0, soap_copy_ns1__NDFDgenLatLonListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_dwmlOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NDFDgenLatLonListResponse(struct soap *soap, const struct ns1__NDFDgenLatLonListResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__NDFDgenLatLonListResponse);
	if (soap_out_ns1__NDFDgenLatLonListResponse(soap, tag?tag:"ns1:NDFDgenLatLonListResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__NDFDgenLatLonListResponse * SOAP_FMAC4 soap_get_ns1__NDFDgenLatLonListResponse(struct soap *soap, struct ns1__NDFDgenLatLonListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NDFDgenLatLonListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__NDFDgenLatLonListResponse * SOAP_FMAC2 soap_instantiate_ns1__NDFDgenLatLonListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NDFDgenLatLonListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__NDFDgenLatLonListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__NDFDgenLatLonListResponse);
		if (size)
			*size = sizeof(struct ns1__NDFDgenLatLonListResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__NDFDgenLatLonListResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__NDFDgenLatLonListResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__NDFDgenLatLonListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NDFDgenLatLonListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__NDFDgenLatLonListResponse %p -> %p\n", q, p));
	*(struct ns1__NDFDgenLatLonListResponse*)p = *(struct ns1__NDFDgenLatLonListResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NDFDgenByDay(struct soap *soap, struct ns1__NDFDgenByDay *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__decimal(soap, &a->latitude);
	soap_default_xsd__decimal(soap, &a->longitude);
	soap_default_xsd__date(soap, &a->startDate);
	soap_default_xsd__integer(soap, &a->numDays);
	soap_default_ns2__unitType(soap, &a->Unit);
	soap_default_ns2__formatType(soap, &a->format);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NDFDgenByDay(struct soap *soap, const struct ns1__NDFDgenByDay *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &a->latitude);
	soap_serialize_xsd__decimal(soap, &a->longitude);
	soap_serialize_xsd__date(soap, &a->startDate);
	soap_serialize_xsd__integer(soap, &a->numDays);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NDFDgenByDay(struct soap *soap, const char *tag, int id, const struct ns1__NDFDgenByDay *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NDFDgenByDay), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "latitude", -1, &a->latitude, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "longitude", -1, &a->longitude, ""))
		return soap->error;
	if (soap_out_xsd__date(soap, "startDate", -1, &a->startDate, ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "numDays", -1, &a->numDays, ""))
		return soap->error;
	if (soap_out_ns2__unitType(soap, "Unit", -1, &a->Unit, ""))
		return soap->error;
	if (soap_out_ns2__formatType(soap, "format", -1, &a->format, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__NDFDgenByDay * SOAP_FMAC4 soap_in_ns1__NDFDgenByDay(struct soap *soap, const char *tag, struct ns1__NDFDgenByDay *a, const char *type)
{
	size_t soap_flag_latitude = 1;
	size_t soap_flag_longitude = 1;
	size_t soap_flag_startDate = 1;
	size_t soap_flag_numDays = 1;
	size_t soap_flag_Unit = 1;
	size_t soap_flag_format = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__NDFDgenByDay *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NDFDgenByDay, sizeof(struct ns1__NDFDgenByDay), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__NDFDgenByDay(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_latitude && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "latitude", &a->latitude, "xsd:decimal"))
				{	soap_flag_latitude--;
					continue;
				}
			if (soap_flag_longitude && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "longitude", &a->longitude, "xsd:decimal"))
				{	soap_flag_longitude--;
					continue;
				}
			if (soap_flag_startDate && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__date(soap, "startDate", &a->startDate, "xsd:date"))
				{	soap_flag_startDate--;
					continue;
				}
			if (soap_flag_numDays && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "numDays", &a->numDays, "xsd:integer"))
				{	soap_flag_numDays--;
					continue;
				}
			if (soap_flag_Unit && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__unitType(soap, "Unit", &a->Unit, "ns2:unitType"))
				{	soap_flag_Unit--;
					continue;
				}
			if (soap_flag_format && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__formatType(soap, "format", &a->format, "ns2:formatType"))
				{	soap_flag_format--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__NDFDgenByDay *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NDFDgenByDay, 0, sizeof(struct ns1__NDFDgenByDay), 0, soap_copy_ns1__NDFDgenByDay);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_latitude > 0 || soap_flag_longitude > 0 || soap_flag_startDate > 0 || soap_flag_numDays > 0 || soap_flag_Unit > 0 || soap_flag_format > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NDFDgenByDay(struct soap *soap, const struct ns1__NDFDgenByDay *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__NDFDgenByDay);
	if (soap_out_ns1__NDFDgenByDay(soap, tag?tag:"ns1:NDFDgenByDay", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__NDFDgenByDay * SOAP_FMAC4 soap_get_ns1__NDFDgenByDay(struct soap *soap, struct ns1__NDFDgenByDay *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NDFDgenByDay(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__NDFDgenByDay * SOAP_FMAC2 soap_instantiate_ns1__NDFDgenByDay(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NDFDgenByDay(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__NDFDgenByDay, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__NDFDgenByDay);
		if (size)
			*size = sizeof(struct ns1__NDFDgenByDay);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__NDFDgenByDay, n);
		if (size)
			*size = n * sizeof(struct ns1__NDFDgenByDay);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__NDFDgenByDay*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NDFDgenByDay(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__NDFDgenByDay %p -> %p\n", q, p));
	*(struct ns1__NDFDgenByDay*)p = *(struct ns1__NDFDgenByDay*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NDFDgenByDayResponse(struct soap *soap, struct ns1__NDFDgenByDayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->dwmlByDayOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NDFDgenByDayResponse(struct soap *soap, const struct ns1__NDFDgenByDayResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->dwmlByDayOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NDFDgenByDayResponse(struct soap *soap, const char *tag, int id, const struct ns1__NDFDgenByDayResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NDFDgenByDayResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "dwmlByDayOut", -1, &a->dwmlByDayOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__NDFDgenByDayResponse * SOAP_FMAC4 soap_in_ns1__NDFDgenByDayResponse(struct soap *soap, const char *tag, struct ns1__NDFDgenByDayResponse *a, const char *type)
{
	size_t soap_flag_dwmlByDayOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__NDFDgenByDayResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NDFDgenByDayResponse, sizeof(struct ns1__NDFDgenByDayResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__NDFDgenByDayResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dwmlByDayOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "dwmlByDayOut", &a->dwmlByDayOut, "xsd:string"))
				{	soap_flag_dwmlByDayOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__NDFDgenByDayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NDFDgenByDayResponse, 0, sizeof(struct ns1__NDFDgenByDayResponse), 0, soap_copy_ns1__NDFDgenByDayResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_dwmlByDayOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NDFDgenByDayResponse(struct soap *soap, const struct ns1__NDFDgenByDayResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__NDFDgenByDayResponse);
	if (soap_out_ns1__NDFDgenByDayResponse(soap, tag?tag:"ns1:NDFDgenByDayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__NDFDgenByDayResponse * SOAP_FMAC4 soap_get_ns1__NDFDgenByDayResponse(struct soap *soap, struct ns1__NDFDgenByDayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NDFDgenByDayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__NDFDgenByDayResponse * SOAP_FMAC2 soap_instantiate_ns1__NDFDgenByDayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NDFDgenByDayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__NDFDgenByDayResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__NDFDgenByDayResponse);
		if (size)
			*size = sizeof(struct ns1__NDFDgenByDayResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__NDFDgenByDayResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__NDFDgenByDayResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__NDFDgenByDayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NDFDgenByDayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__NDFDgenByDayResponse %p -> %p\n", q, p));
	*(struct ns1__NDFDgenByDayResponse*)p = *(struct ns1__NDFDgenByDayResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NDFDgen(struct soap *soap, struct ns1__NDFDgen *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__decimal(soap, &a->latitude);
	soap_default_xsd__decimal(soap, &a->longitude);
	soap_default_ns2__productType(soap, &a->product);
	soap_default_time(soap, &a->startTime);
	soap_default_time(soap, &a->endTime);
	soap_default_ns2__unitType(soap, &a->Unit);
	a->weatherParameters = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NDFDgen(struct soap *soap, const struct ns1__NDFDgen *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &a->latitude);
	soap_serialize_xsd__decimal(soap, &a->longitude);
	soap_serialize_PointerTons2__weatherParametersType(soap, &a->weatherParameters);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NDFDgen(struct soap *soap, const char *tag, int id, const struct ns1__NDFDgen *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NDFDgen), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "latitude", -1, &a->latitude, ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "longitude", -1, &a->longitude, ""))
		return soap->error;
	if (soap_out_ns2__productType(soap, "product", -1, &a->product, ""))
		return soap->error;
	if (soap_out_time(soap, "startTime", -1, &a->startTime, ""))
		return soap->error;
	if (soap_out_time(soap, "endTime", -1, &a->endTime, ""))
		return soap->error;
	if (soap_out_ns2__unitType(soap, "Unit", -1, &a->Unit, ""))
		return soap->error;
	if (soap_out_PointerTons2__weatherParametersType(soap, "weatherParameters", -1, &a->weatherParameters, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__NDFDgen * SOAP_FMAC4 soap_in_ns1__NDFDgen(struct soap *soap, const char *tag, struct ns1__NDFDgen *a, const char *type)
{
	size_t soap_flag_latitude = 1;
	size_t soap_flag_longitude = 1;
	size_t soap_flag_product = 1;
	size_t soap_flag_startTime = 1;
	size_t soap_flag_endTime = 1;
	size_t soap_flag_Unit = 1;
	size_t soap_flag_weatherParameters = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__NDFDgen *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NDFDgen, sizeof(struct ns1__NDFDgen), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__NDFDgen(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_latitude && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "latitude", &a->latitude, "xsd:decimal"))
				{	soap_flag_latitude--;
					continue;
				}
			if (soap_flag_longitude && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "longitude", &a->longitude, "xsd:decimal"))
				{	soap_flag_longitude--;
					continue;
				}
			if (soap_flag_product && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__productType(soap, "product", &a->product, "ns2:productType"))
				{	soap_flag_product--;
					continue;
				}
			if (soap_flag_startTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "startTime", &a->startTime, "xsd:dateTime"))
				{	soap_flag_startTime--;
					continue;
				}
			if (soap_flag_endTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "endTime", &a->endTime, "xsd:dateTime"))
				{	soap_flag_endTime--;
					continue;
				}
			if (soap_flag_Unit && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns2__unitType(soap, "Unit", &a->Unit, "ns2:unitType"))
				{	soap_flag_Unit--;
					continue;
				}
			if (soap_flag_weatherParameters && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__weatherParametersType(soap, "weatherParameters", &a->weatherParameters, "ns2:weatherParametersType"))
				{	soap_flag_weatherParameters--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__NDFDgen *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NDFDgen, 0, sizeof(struct ns1__NDFDgen), 0, soap_copy_ns1__NDFDgen);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_latitude > 0 || soap_flag_longitude > 0 || soap_flag_product > 0 || soap_flag_startTime > 0 || soap_flag_endTime > 0 || soap_flag_Unit > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NDFDgen(struct soap *soap, const struct ns1__NDFDgen *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__NDFDgen);
	if (soap_out_ns1__NDFDgen(soap, tag?tag:"ns1:NDFDgen", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__NDFDgen * SOAP_FMAC4 soap_get_ns1__NDFDgen(struct soap *soap, struct ns1__NDFDgen *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NDFDgen(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__NDFDgen * SOAP_FMAC2 soap_instantiate_ns1__NDFDgen(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NDFDgen(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__NDFDgen, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__NDFDgen);
		if (size)
			*size = sizeof(struct ns1__NDFDgen);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__NDFDgen, n);
		if (size)
			*size = n * sizeof(struct ns1__NDFDgen);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__NDFDgen*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NDFDgen(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__NDFDgen %p -> %p\n", q, p));
	*(struct ns1__NDFDgen*)p = *(struct ns1__NDFDgen*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__NDFDgenResponse(struct soap *soap, struct ns1__NDFDgenResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->dwmlOut);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__NDFDgenResponse(struct soap *soap, const struct ns1__NDFDgenResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->dwmlOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NDFDgenResponse(struct soap *soap, const char *tag, int id, const struct ns1__NDFDgenResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NDFDgenResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "dwmlOut", -1, &a->dwmlOut, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__NDFDgenResponse * SOAP_FMAC4 soap_in_ns1__NDFDgenResponse(struct soap *soap, const char *tag, struct ns1__NDFDgenResponse *a, const char *type)
{
	size_t soap_flag_dwmlOut = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__NDFDgenResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NDFDgenResponse, sizeof(struct ns1__NDFDgenResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns1__NDFDgenResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_dwmlOut && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "dwmlOut", &a->dwmlOut, "xsd:string"))
				{	soap_flag_dwmlOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__NDFDgenResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NDFDgenResponse, 0, sizeof(struct ns1__NDFDgenResponse), 0, soap_copy_ns1__NDFDgenResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_dwmlOut > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NDFDgenResponse(struct soap *soap, const struct ns1__NDFDgenResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__NDFDgenResponse);
	if (soap_out_ns1__NDFDgenResponse(soap, tag?tag:"ns1:NDFDgenResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__NDFDgenResponse * SOAP_FMAC4 soap_get_ns1__NDFDgenResponse(struct soap *soap, struct ns1__NDFDgenResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NDFDgenResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns1__NDFDgenResponse * SOAP_FMAC2 soap_instantiate_ns1__NDFDgenResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NDFDgenResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__NDFDgenResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns1__NDFDgenResponse);
		if (size)
			*size = sizeof(struct ns1__NDFDgenResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns1__NDFDgenResponse, n);
		if (size)
			*size = n * sizeof(struct ns1__NDFDgenResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns1__NDFDgenResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NDFDgenResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns1__NDFDgenResponse %p -> %p\n", q, p));
	*(struct ns1__NDFDgenResponse*)p = *(struct ns1__NDFDgenResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__weatherParametersType(struct soap *soap, ns2__weatherParametersType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__weatherParametersType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__weatherParametersType(struct soap *soap, const char *tag, int id, ns2__weatherParametersType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__weatherParametersType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__weatherParametersType ** SOAP_FMAC4 soap_in_PointerTons2__weatherParametersType(struct soap *soap, const char *tag, ns2__weatherParametersType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__weatherParametersType **)soap_malloc(soap, sizeof(ns2__weatherParametersType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__weatherParametersType *)soap_instantiate_ns2__weatherParametersType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__weatherParametersType ** p = (ns2__weatherParametersType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__weatherParametersType, sizeof(ns2__weatherParametersType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__weatherParametersType(struct soap *soap, ns2__weatherParametersType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__weatherParametersType);
	if (soap_out_PointerTons2__weatherParametersType(soap, tag?tag:"ns2:weatherParametersType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__weatherParametersType ** SOAP_FMAC4 soap_get_PointerTons2__weatherParametersType(struct soap *soap, ns2__weatherParametersType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__weatherParametersType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
