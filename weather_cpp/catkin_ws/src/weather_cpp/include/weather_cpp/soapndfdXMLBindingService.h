/* soapndfdXMLBindingService.h
   Generated by gSOAP 2.8.16 from ndfd.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapndfdXMLBindingService_H
#define soapndfdXMLBindingService_H
#include "soapH.h"
class SOAP_CMAC ndfdXMLBindingService
{ public:
	struct soap *soap;
	bool own;
	/// Constructor
	ndfdXMLBindingService();
	/// Constructor to use/share an engine state
	ndfdXMLBindingService(struct soap*);
	/// Constructor with engine input+output mode control
	ndfdXMLBindingService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	ndfdXMLBindingService(soap_mode imode, soap_mode omode);
	/// Destructor, also frees all deserialized data
	virtual ~ndfdXMLBindingService();
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to defaults
	virtual	void reset();
	/// Initializer used by constructor
	virtual	void ndfdXMLBindingService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	ndfdXMLBindingService *copy() SOAP_PURE_VIRTUAL;
	/// Close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Run simple single-thread iterative service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
	/// Then accept SSL handshake, when SSL is used
	virtual	int ssl_accept();
#endif
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error code or SOAP_OK)
	virtual	int dispatch();

	///
	/// Service operations (you should define these):
	/// Note: compile with -DWITH_PURE_VIRTUAL for pure virtual methods
	///

	/// Web service operation 'NDFDgen' (returns error code or SOAP_OK)
	virtual	int NDFDgen(std::string latitude, std::string longitude, enum ns2__productType product, time_t startTime, time_t endTime, enum ns2__unitType Unit, ns2__weatherParametersType *weatherParameters, std::string &dwmlOut) SOAP_PURE_VIRTUAL;

	/// Web service operation 'NDFDgenByDay' (returns error code or SOAP_OK)
	virtual	int NDFDgenByDay(std::string latitude, std::string longitude, std::string startDate, std::string numDays, enum ns2__unitType Unit, enum ns2__formatType format, std::string &dwmlByDayOut) SOAP_PURE_VIRTUAL;

	/// Web service operation 'NDFDgenLatLonList' (returns error code or SOAP_OK)
	virtual	int NDFDgenLatLonList(std::string listLatLon, enum ns2__productType product, time_t startTime, time_t endTime, enum ns2__unitType Unit, ns2__weatherParametersType *weatherParameters, std::string &dwmlOut) SOAP_PURE_VIRTUAL;

	/// Web service operation 'NDFDgenByDayLatLonList' (returns error code or SOAP_OK)
	virtual	int NDFDgenByDayLatLonList(std::string listLatLon, std::string startDate, std::string numDays, enum ns2__unitType Unit, enum ns2__formatType format, std::string &dwmlByDayOut) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GmlLatLonList' (returns error code or SOAP_OK)
	virtual	int GmlLatLonList(std::string listLatLon, time_t requestedTime, enum ns2__featureTypeType featureType, ns2__weatherParametersType *weatherParameters, std::string &dwGmlOut) SOAP_PURE_VIRTUAL;

	/// Web service operation 'GmlTimeSeries' (returns error code or SOAP_OK)
	virtual	int GmlTimeSeries(std::string listLatLon, time_t startTime, time_t endTime, enum ns2__compTypeType compType, enum ns2__featureTypeType featureType, std::string propertyName, std::string &dwGmlOut) SOAP_PURE_VIRTUAL;

	/// Web service operation 'LatLonListSubgrid' (returns error code or SOAP_OK)
	virtual	int LatLonListSubgrid(std::string lowerLeftLatitude, std::string lowerLeftLongitude, std::string upperRightLatitude, std::string upperRightLongitude, std::string resolution, struct ns1__LatLonListSubgridResponse &_param_1) SOAP_PURE_VIRTUAL;

	/// Web service operation 'LatLonListLine' (returns error code or SOAP_OK)
	virtual	int LatLonListLine(std::string endPoint1Lat, std::string endPoint1Lon, std::string endPoint2Lat, std::string endPoint2Lon, struct ns1__LatLonListLineResponse &_param_2) SOAP_PURE_VIRTUAL;

	/// Web service operation 'LatLonListZipCode' (returns error code or SOAP_OK)
	virtual	int LatLonListZipCode(std::string zipCodeList, struct ns1__LatLonListZipCodeResponse &_param_3) SOAP_PURE_VIRTUAL;

	/// Web service operation 'LatLonListSquare' (returns error code or SOAP_OK)
	virtual	int LatLonListSquare(std::string centerPointLat, std::string centerPointLon, std::string distanceLat, std::string distanceLon, std::string resolution, struct ns1__LatLonListSquareResponse &_param_4) SOAP_PURE_VIRTUAL;

	/// Web service operation 'CornerPoints' (returns error code or SOAP_OK)
	virtual	int CornerPoints(enum ns2__sectorType sector, struct ns1__CornerPointsResponse &_param_5) SOAP_PURE_VIRTUAL;

	/// Web service operation 'LatLonListCityNames' (returns error code or SOAP_OK)
	virtual	int LatLonListCityNames(enum ns2__displayLevelType displayLevel, struct ns1__LatLonListCityNamesResponse &_param_6) SOAP_PURE_VIRTUAL;
};
#endif
