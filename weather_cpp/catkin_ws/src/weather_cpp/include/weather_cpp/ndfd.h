/* ndfd.h
   Generated by wsdl2h 2.8.16 from ndfdXML.wsdl and typemap.dat
   2017-01-18 03:44:10 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on ndfd.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl"
ns2 = "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd"
//gsoap ns2   schema namespace:	http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd
//gsoap ns2   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:date"
typedef std::string xsd__date;

/// Primitive built-in type "xs:decimal"
typedef std::string xsd__decimal;

/// Primitive built-in type "xs:integer"
typedef std::string xsd__integer;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns2__weatherParametersType.
class ns2__weatherParametersType;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd                 *
 *                                                                            *
\******************************************************************************/


/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":sectorType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__sectorType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__sectorType
{
	ns2__sectorType__conus,	///< xs:string value="conus"
	ns2__sectorType__nhemi,	///< xs:string value="nhemi"
	ns2__sectorType__alaska,	///< xs:string value="alaska"
	ns2__sectorType__guam,	///< xs:string value="guam"
	ns2__sectorType__hawaii,	///< xs:string value="hawaii"
	ns2__sectorType__puertori,	///< xs:string value="puertori"
	ns2__sectorType__npacocn,	///< xs:string value="npacocn"
};

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":unitType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__unitType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__unitType
{
	ns2__unitType__e,	///< xs:string value="e"
	ns2__unitType__m,	///< xs:string value="m"
};

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":formatType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__formatType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__formatType
{
	ns2__formatType__24_x0020hourly,	///< xs:string value="24 hourly"
	ns2__formatType__12_x0020hourly,	///< xs:string value="12 hourly"
};

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":productType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__productType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__productType
{
	ns2__productType__time_series,	///< xs:string value="time-series"
	ns2__productType__glance,	///< xs:string value="glance"
};

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":latLonPairType is a simpleType restriction of xs:string.
/// Content pattern is "[\\-]?\\d{1,2}\\.\\d+,[\\-]?\\d{1,3}\\.\\d+" (note: not automatically enforced)
typedef std::string ns2__latLonPairType "[\\-]?\\d{1,2}\\.\\d+,[\\-]?\\d{1,3}\\.\\d+";

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":listLatLonType is a simpleType restriction of xs:string.
/// Content pattern is "[\\-]?\\d{1,2}\\.\\d+,[\\-]?\\d{1,3}\\.\\d+( [\\-]?\\d{1,2}\\.\\d+,[\\-]?\\d{1,3}\\.\\d+)*" (note: not automatically enforced)
typedef std::string ns2__listLatLonType "[\\-]?\\d{1,2}\\.\\d+,[\\-]?\\d{1,3}\\.\\d+( [\\-]?\\d{1,2}\\.\\d+,[\\-]?\\d{1,3}\\.\\d+)*";

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":zipCodeType is a simpleType restriction of xs:string.
/// Content pattern is "\\d{5}(\\-\\d{4})?" (note: not automatically enforced)
typedef std::string ns2__zipCodeType "\\d{5}(\\-\\d{4})?";

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":zipCodeListType is a simpleType restriction of xs:string.
/// Content pattern is "\\d{5}(\\-\\d{4})?( \\d{5}(\\-\\d{4})?)*" (note: not automatically enforced)
typedef std::string ns2__zipCodeListType "\\d{5}(\\-\\d{4})?( \\d{5}(\\-\\d{4})?)*";

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":featureTypeType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__featureTypeType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__featureTypeType
{
	ns2__featureTypeType__Forecast_USCOREGml2Point,	///< xs:string value="Forecast_Gml2Point"
	ns2__featureTypeType__Forecast_USCOREGml2AllWx,	///< xs:string value="Forecast_Gml2AllWx"
	ns2__featureTypeType__Forecast_USCOREGmlsfPoint,	///< xs:string value="Forecast_GmlsfPoint"
	ns2__featureTypeType__Forecast_USCOREGmlObs,	///< xs:string value="Forecast_GmlObs"
	ns2__featureTypeType__NdfdMultiPointCoverage,	///< xs:string value="NdfdMultiPointCoverage"
	ns2__featureTypeType__Ndfd_USCOREKmlPoint,	///< xs:string value="Ndfd_KmlPoint"
};

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":compTypeType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__compTypeType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__compTypeType
{
	ns2__compTypeType__IsEqual,	///< xs:string value="IsEqual"
	ns2__compTypeType__Between,	///< xs:string value="Between"
	ns2__compTypeType__GreaterThan,	///< xs:string value="GreaterThan"
	ns2__compTypeType__GreaterThanEqualTo,	///< xs:string value="GreaterThanEqualTo"
	ns2__compTypeType__LessThan,	///< xs:string value="LessThan"
	ns2__compTypeType__LessThanEqualTo,	///< xs:string value="LessThanEqualTo"
};

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":listCityNamesType is a simpleType restriction of xs:string.
/// Content pattern is "[a-zA-Z'\\-]*( ?[a-zA-Z'\\-]*)*,[A-Z][A-Z](\\|[a-zA-Z'\\-]*( ?[a-zA-Z'\\-]*)*,[A-Z][A-Z])*" (note: not automatically enforced)
typedef std::string ns2__listCityNamesType "[a-zA-Z'\\-]*( ?[a-zA-Z'\\-]*)*,[A-Z][A-Z](\\|[a-zA-Z'\\-]*( ?[a-zA-Z'\\-]*)*,[A-Z][A-Z])*";

/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":displayLevelType is a simpleType restriction of xs:integer.
/// Note: enum values are prefixed with 'ns2__displayLevelType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__displayLevelType
{
	ns2__displayLevelType__1 = 1,	///< xs:integer value="1"
	ns2__displayLevelType__2 = 2,	///< xs:integer value="2"
	ns2__displayLevelType__3 = 3,	///< xs:integer value="3"
	ns2__displayLevelType__4 = 4,	///< xs:integer value="4"
	ns2__displayLevelType__12 = 12,	///< xs:integer value="12"
	ns2__displayLevelType__34 = 34,	///< xs:integer value="34"
	ns2__displayLevelType__1234 = 1234,	///< xs:integer value="1234"
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd                 *
 *                                                                            *
\******************************************************************************/


/// "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd":weatherParametersType is a complexType.
/// class ns2__weatherParametersType operations:
/// - soap_new_ns2__weatherParametersType(soap*) allocate
/// - soap_new_ns2__weatherParametersType(soap*, int num) allocate array
/// - soap_new_req_ns2__weatherParametersType(soap*, ...) allocate, set required members
/// - soap_new_set_ns2__weatherParametersType(soap*, ...) allocate, set all public members
/// - int soap_read_ns2__weatherParametersType(soap*, ns2__weatherParametersType*) deserialize from a stream
/// - int soap_write_ns2__weatherParametersType(soap, ns2__weatherParametersType*) serialize to a stream
class ns2__weatherParametersType
{ public:
/// Element maxt of type xs:boolean.
    bool                                 maxt                           1;	///< Required element.
/// Element mint of type xs:boolean.
    bool                                 mint                           1;	///< Required element.
/// Element temp of type xs:boolean.
    bool                                 temp                           1;	///< Required element.
/// Element dew of type xs:boolean.
    bool                                 dew                            1;	///< Required element.
/// Element pop12 of type xs:boolean.
    bool                                 pop12                          1;	///< Required element.
/// Element qpf of type xs:boolean.
    bool                                 qpf                            1;	///< Required element.
/// Element sky of type xs:boolean.
    bool                                 sky                            1;	///< Required element.
/// Element snow of type xs:boolean.
    bool                                 snow                           1;	///< Required element.
/// Element wspd of type xs:boolean.
    bool                                 wspd                           1;	///< Required element.
/// Element wdir of type xs:boolean.
    bool                                 wdir                           1;	///< Required element.
/// Element wx of type xs:boolean.
    bool                                 wx                             1;	///< Required element.
/// Element waveh of type xs:boolean.
    bool                                 waveh                          1;	///< Required element.
/// Element icons of type xs:boolean.
    bool                                 icons                          1;	///< Required element.
/// Element rh of type xs:boolean.
    bool                                 rh                             1;	///< Required element.
/// Element appt of type xs:boolean.
    bool                                 appt                           1;	///< Required element.
/// Element incw34 of type xs:boolean.
    bool                                 incw34                         1;	///< Required element.
/// Element incw50 of type xs:boolean.
    bool                                 incw50                         1;	///< Required element.
/// Element incw64 of type xs:boolean.
    bool                                 incw64                         1;	///< Required element.
/// Element cumw34 of type xs:boolean.
    bool                                 cumw34                         1;	///< Required element.
/// Element cumw50 of type xs:boolean.
    bool                                 cumw50                         1;	///< Required element.
/// Element cumw64 of type xs:boolean.
    bool                                 cumw64                         1;	///< Required element.
/// Element critfireo of type xs:boolean.
    bool                                 critfireo                      1;	///< Required element.
/// Element dryfireo of type xs:boolean.
    bool                                 dryfireo                       1;	///< Required element.
/// Element conhazo of type xs:boolean.
    bool                                 conhazo                        1;	///< Required element.
/// Element ptornado of type xs:boolean.
    bool                                 ptornado                       1;	///< Required element.
/// Element phail of type xs:boolean.
    bool                                 phail                          1;	///< Required element.
/// Element ptstmwinds of type xs:boolean.
    bool                                 ptstmwinds                     1;	///< Required element.
/// Element pxtornado of type xs:boolean.
    bool                                 pxtornado                      1;	///< Required element.
/// Element pxhail of type xs:boolean.
    bool                                 pxhail                         1;	///< Required element.
/// Element pxtstmwinds of type xs:boolean.
    bool                                 pxtstmwinds                    1;	///< Required element.
/// Element ptotsvrtstm of type xs:boolean.
    bool                                 ptotsvrtstm                    1;	///< Required element.
/// Element pxtotsvrtstm of type xs:boolean.
    bool                                 pxtotsvrtstm                   1;	///< Required element.
/// Element tmpabv14d of type xs:boolean.
    bool                                 tmpabv14d                      1;	///< Required element.
/// Element tmpblw14d of type xs:boolean.
    bool                                 tmpblw14d                      1;	///< Required element.
/// Element tmpabv30d of type xs:boolean.
    bool                                 tmpabv30d                      1;	///< Required element.
/// Element tmpblw30d of type xs:boolean.
    bool                                 tmpblw30d                      1;	///< Required element.
/// Element tmpabv90d of type xs:boolean.
    bool                                 tmpabv90d                      1;	///< Required element.
/// Element tmpblw90d of type xs:boolean.
    bool                                 tmpblw90d                      1;	///< Required element.
/// Element prcpabv14d of type xs:boolean.
    bool                                 prcpabv14d                     1;	///< Required element.
/// Element prcpblw14d of type xs:boolean.
    bool                                 prcpblw14d                     1;	///< Required element.
/// Element prcpabv30d of type xs:boolean.
    bool                                 prcpabv30d                     1;	///< Required element.
/// Element prcpblw30d of type xs:boolean.
    bool                                 prcpblw30d                     1;	///< Required element.
/// Element prcpabv90d of type xs:boolean.
    bool                                 prcpabv90d                     1;	///< Required element.
/// Element prcpblw90d of type xs:boolean.
    bool                                 prcpblw90d                     1;	///< Required element.
/// Element precipa_r of type xs:boolean.
    bool                                 precipa_USCOREr                1;	///< Required element.
/// Element sky_r of type xs:boolean.
    bool                                 sky_USCOREr                    1;	///< Required element.
/// Element td_r of type xs:boolean.
    bool                                 td_USCOREr                     1;	///< Required element.
/// Element temp_r of type xs:boolean.
    bool                                 temp_USCOREr                   1;	///< Required element.
/// Element wdir_r of type xs:boolean.
    bool                                 wdir_USCOREr                   1;	///< Required element.
/// Element wspd_r of type xs:boolean.
    bool                                 wspd_USCOREr                   1;	///< Required element.
/// Element wwa of type xs:boolean.
    bool                                 wwa                            1;	///< Required element.
/// Element wgust of type xs:boolean.
    bool                                 wgust                          1;	///< Required element.
/// Element iceaccum of type xs:boolean.
    bool                                 iceaccum                       1;	///< Required element.
/// Element maxrh of type xs:boolean.
    bool                                 maxrh                          1;	///< Required element.
/// Element minrh of type xs:boolean.
    bool                                 minrh                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	ndfdXMLBinding 
//gsoap ns1  service type:	ndfdXMLPortType 
//gsoap ns1  service port:	http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php 
//gsoap ns1  service namespace:	http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref ndfdXMLBinding

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ndfdXMLBinding Binding "ndfdXMLBinding"

@section ndfdXMLBinding_service Service Documentation "ndfdXMLBinding"
The service has 12 exposed functions, NDFDgen, NDFDgenLatLonList, NDFDgenByDay,
NDFDgenByDayLatLonList, 
                  LatLonListSubgrid, LatLonListLine, LatLonListZipCode, CornerPoints,
LatLonListSquare, GmlLatLonList, GmlTimeSeries, and LatLonListCityNames. 
                  For the NDFDgen function, the client needs to provide a latitude
and longitude pair and the product type. The Unit will default
                  to U.S. Standard (english) unless Metric is chosen by client.
The client also needs to provide the start and end time (Local) 
                  of the period that it wants data for (if shorter than the 7 days
is wanted).  For the time-series product, the client needs to 
                  provide an array of boolean values corresponding to which NDFD
values are desired.
                  For the NDFDgenByDay function, the client needs to provide a
latitude and longitude pair, the date (Local) it wants to start 
                  retrieving data for and the number of days worth of data.  The
Unit will default to U.S. Standard (english) unless Metric is 
                  chosen by client. The client also needs to provide the format
that is desired.  
                  For the multi point versions, NDFDgenLatLonList and NDFDgenByDayLatLonList
a space delimited list of latitude and longitude 
		  pairs are substituted for the single latitude and longitude input.
 Each latitude and longitude 
                  pair is composed of a latitude and longitude delimited by a comma.
 
		  For the LatLonListSubgrid, the user provides a comma delimited
latitude and longitude pair for the lower left and for 
                  the upper right corners of a rectangular subgrid.  The function
can also take a integer 
                  resolution to reduce the number of grid points returned. The
service then returns a list of 
                  latitude and longitude pairs for all the grid points contained
in the subgrid. 
                  weather values should appear in the time series product.  
		  For the LatLonListLine, The inputs are the same as the function
NDFDgen except the latitude and longitude pair is 
		  replaced by two latitude and longitude pairs, one for each end
point a line. The two points are delimited with a space.  
                  The service then returns data for all the NDFD points on the
line formed by the two points.  
		  For the LatLonListZipCode function, the input is the same as the
NDFDgen function except the latitude and longitude values 
		  are relaced by a zip code for the 50 United States and Puerto
Rico.
		  For the LatLonListSquare function, the input is the same as the
NDFDgen function except the latitude and longitude values 
		  are relaced by a zip code for the 50 United States and Puerto
Rico.
		  For the CornerPoints function, the service requires a valid NDFD
grid name.  The function returns a 
                  list of four latitude and longitude pairs, one for each corner
of the NDFD grid.  The function 
                  also returns the minimum resolution required to return the entire
grid below the maximum points 
                  threshold.
                  For the GmlLatLonList function, the service requires a list of
latitude and longitude pairs, the time (UTC) the user 
		  wants data for, the GML feature type and the array of boolean
values corresponding to which NDFD values are desired.
                  For the GmlTimeSeries function, the service requires a list of
latitude and longitude pairs, the start and end time (UTC) the user 
		  wants data for, a comparison type (IsEqual, Between, GreaterThan,
GreaterThan, GreaterThanEqualTo, LessThan, and  
                  LessThanEqualTo), the GML feature type and The input variable
"propertyName" contains a comma delimited string of NDFD element to 
                  indicate which weather parameters are being requested.
                  For the LatLonListCityNames function, the services requires a
detail level that that ranges from 1 to 4.  Level 1 generally represents
                  large main cities.  Level 2 represents progressively smaller
cities or large cities that are close to another even larger city.  Levels
                  3 and 4 are part one and two of a list of cities that help increase
the areal coverage of the cities dataset.  This functions
                  returns a list of latitude and longitude values along with a
seperate list of city name for those point.

@section ndfdXMLBinding_operations Operations of Binding  "ndfdXMLBinding"

  - @ref ns1__NDFDgen

  - @ref ns1__NDFDgenByDay

  - @ref ns1__NDFDgenLatLonList

  - @ref ns1__NDFDgenByDayLatLonList

  - @ref ns1__GmlLatLonList

  - @ref ns1__GmlTimeSeries

  - @ref ns1__LatLonListSubgrid

  - @ref ns1__LatLonListLine

  - @ref ns1__LatLonListZipCode

  - @ref ns1__LatLonListSquare

  - @ref ns1__CornerPoints

  - @ref ns1__LatLonListCityNames

@section ndfdXMLBinding_ports Endpoints of Binding  "ndfdXMLBinding"

  - http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php

Note: use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ndfdXMLBinding                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__NDFDgen                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__NDFDgen" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns National Weather Service digital weather forecast data

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgen"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgen"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__NDFDgen(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    xsd__decimal                        latitude,
    xsd__decimal                        longitude,
    enum ns2__productType               product,
    time_t                              startTime,
    time_t                              endTime,
    enum ns2__unitType                  Unit,
    ns2__weatherParametersType*         weatherParameters,
    // output parameters:
    std::string                        &dwmlOut
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__NDFDgen(
    struct soap *soap,
    // input parameters:
    xsd__decimal                        latitude,
    xsd__decimal                        longitude,
    enum ns2__productType               product,
    time_t                              startTime,
    time_t                              endTime,
    enum ns2__unitType                  Unit,
    ns2__weatherParametersType*         weatherParameters,
    // output parameters:
    std::string                        &dwmlOut
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NDFDgen SOAP
//gsoap ns1  service method-style:	NDFDgen rpc
//gsoap ns1  service method-encoding:	NDFDgen http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	NDFDgen http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgen
//gsoap ns1  service method-output-action:	NDFDgen http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenResponse
int ns1__NDFDgen(
    xsd__decimal                        latitude,	///< Input parameter
    xsd__decimal                        longitude,	///< Input parameter
    enum ns2__productType               product,	///< Input parameter
    time_t                              startTime,	///< Input parameter
    time_t                              endTime,	///< Input parameter
    enum ns2__unitType                  Unit,	///< Input parameter
    ns2__weatherParametersType*         weatherParameters,	///< Input parameter
    std::string                        &dwmlOut	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__NDFDgenByDay                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__NDFDgenByDay" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns National Weather Service digital weather forecast data summarized over either
24- or 12-hourly periods

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDay"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDay"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDayResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__NDFDgenByDay(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    xsd__decimal                        latitude,
    xsd__decimal                        longitude,
    xsd__date                           startDate,
    xsd__integer                        numDays,
    enum ns2__unitType                  Unit,
    enum ns2__formatType                format,
    // output parameters:
    std::string                        &dwmlByDayOut
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__NDFDgenByDay(
    struct soap *soap,
    // input parameters:
    xsd__decimal                        latitude,
    xsd__decimal                        longitude,
    xsd__date                           startDate,
    xsd__integer                        numDays,
    enum ns2__unitType                  Unit,
    enum ns2__formatType                format,
    // output parameters:
    std::string                        &dwmlByDayOut
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NDFDgenByDay SOAP
//gsoap ns1  service method-style:	NDFDgenByDay rpc
//gsoap ns1  service method-encoding:	NDFDgenByDay http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	NDFDgenByDay http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDay
//gsoap ns1  service method-output-action:	NDFDgenByDay http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDayResponse
int ns1__NDFDgenByDay(
    xsd__decimal                        latitude,	///< Input parameter
    xsd__decimal                        longitude,	///< Input parameter
    xsd__date                           startDate,	///< Input parameter
    xsd__integer                        numDays,	///< Input parameter
    enum ns2__unitType                  Unit,	///< Input parameter
    enum ns2__formatType                format,	///< Input parameter
    std::string                        &dwmlByDayOut	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__NDFDgenLatLonList                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__NDFDgenLatLonList" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns National Weather Service digital weather forecast data

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenLatLonList"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenLatLonList"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenLatLonListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__NDFDgenLatLonList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__listLatLonType                 listLatLon,
    enum ns2__productType               product,
    time_t                              startTime,
    time_t                              endTime,
    enum ns2__unitType                  Unit,
    ns2__weatherParametersType*         weatherParameters,
    // output parameters:
    std::string                        &dwmlOut
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__NDFDgenLatLonList(
    struct soap *soap,
    // input parameters:
    ns2__listLatLonType                 listLatLon,
    enum ns2__productType               product,
    time_t                              startTime,
    time_t                              endTime,
    enum ns2__unitType                  Unit,
    ns2__weatherParametersType*         weatherParameters,
    // output parameters:
    std::string                        &dwmlOut
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NDFDgenLatLonList SOAP
//gsoap ns1  service method-style:	NDFDgenLatLonList rpc
//gsoap ns1  service method-encoding:	NDFDgenLatLonList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	NDFDgenLatLonList http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenLatLonList
//gsoap ns1  service method-output-action:	NDFDgenLatLonList http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenLatLonListResponse
int ns1__NDFDgenLatLonList(
    ns2__listLatLonType                 listLatLon,	///< Input parameter
    enum ns2__productType               product,	///< Input parameter
    time_t                              startTime,	///< Input parameter
    time_t                              endTime,	///< Input parameter
    enum ns2__unitType                  Unit,	///< Input parameter
    ns2__weatherParametersType*         weatherParameters,	///< Input parameter
    std::string                        &dwmlOut	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__NDFDgenByDayLatLonList                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__NDFDgenByDayLatLonList" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns National Weather Service digital weather forecast data summarized over either
24- or 12-hourly periods

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDayLatLonList"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDayLatLonList"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDayLatLonListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__NDFDgenByDayLatLonList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__listLatLonType                 listLatLon,
    xsd__date                           startDate,
    xsd__integer                        numDays,
    enum ns2__unitType                  Unit,
    enum ns2__formatType                format,
    // output parameters:
    std::string                        &dwmlByDayOut
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__NDFDgenByDayLatLonList(
    struct soap *soap,
    // input parameters:
    ns2__listLatLonType                 listLatLon,
    xsd__date                           startDate,
    xsd__integer                        numDays,
    enum ns2__unitType                  Unit,
    enum ns2__formatType                format,
    // output parameters:
    std::string                        &dwmlByDayOut
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NDFDgenByDayLatLonList SOAP
//gsoap ns1  service method-style:	NDFDgenByDayLatLonList rpc
//gsoap ns1  service method-encoding:	NDFDgenByDayLatLonList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	NDFDgenByDayLatLonList http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDayLatLonList
//gsoap ns1  service method-output-action:	NDFDgenByDayLatLonList http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#NDFDgenByDayLatLonListResponse
int ns1__NDFDgenByDayLatLonList(
    ns2__listLatLonType                 listLatLon,	///< Input parameter
    xsd__date                           startDate,	///< Input parameter
    xsd__integer                        numDays,	///< Input parameter
    enum ns2__unitType                  Unit,	///< Input parameter
    enum ns2__formatType                format,	///< Input parameter
    std::string                        &dwmlByDayOut	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GmlLatLonList                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__GmlLatLonList" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns National Weather Service digital weather forecast data encoded in GML for
a single time

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlLatLonList"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlLatLonList"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlLatLonListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GmlLatLonList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__listLatLonType                 listLatLon,
    time_t                              requestedTime,
    enum ns2__featureTypeType           featureType,
    ns2__weatherParametersType*         weatherParameters,
    // output parameters:
    std::string                        &dwGmlOut
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GmlLatLonList(
    struct soap *soap,
    // input parameters:
    ns2__listLatLonType                 listLatLon,
    time_t                              requestedTime,
    enum ns2__featureTypeType           featureType,
    ns2__weatherParametersType*         weatherParameters,
    // output parameters:
    std::string                        &dwGmlOut
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GmlLatLonList SOAP
//gsoap ns1  service method-style:	GmlLatLonList rpc
//gsoap ns1  service method-encoding:	GmlLatLonList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	GmlLatLonList http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlLatLonList
//gsoap ns1  service method-output-action:	GmlLatLonList http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlLatLonListResponse
int ns1__GmlLatLonList(
    ns2__listLatLonType                 listLatLon,	///< Input parameter
    time_t                              requestedTime,	///< Input parameter
    enum ns2__featureTypeType           featureType,	///< Input parameter
    ns2__weatherParametersType*         weatherParameters,	///< Input parameter
    std::string                        &dwGmlOut	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GmlTimeSeries                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__GmlTimeSeries" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns National Weather Service digital weather forecast data encoded in GML for
a time period

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlTimeSeries"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlTimeSeries"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlTimeSeriesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GmlTimeSeries(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__listLatLonType                 listLatLon,
    time_t                              startTime,
    time_t                              endTime,
    enum ns2__compTypeType              compType,
    enum ns2__featureTypeType           featureType,
    std::string                         propertyName,
    // output parameters:
    std::string                        &dwGmlOut
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GmlTimeSeries(
    struct soap *soap,
    // input parameters:
    ns2__listLatLonType                 listLatLon,
    time_t                              startTime,
    time_t                              endTime,
    enum ns2__compTypeType              compType,
    enum ns2__featureTypeType           featureType,
    std::string                         propertyName,
    // output parameters:
    std::string                        &dwGmlOut
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GmlTimeSeries SOAP
//gsoap ns1  service method-style:	GmlTimeSeries rpc
//gsoap ns1  service method-encoding:	GmlTimeSeries http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	GmlTimeSeries http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlTimeSeries
//gsoap ns1  service method-output-action:	GmlTimeSeries http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#GmlTimeSeriesResponse
int ns1__GmlTimeSeries(
    ns2__listLatLonType                 listLatLon,	///< Input parameter
    time_t                              startTime,	///< Input parameter
    time_t                              endTime,	///< Input parameter
    enum ns2__compTypeType              compType,	///< Input parameter
    enum ns2__featureTypeType           featureType,	///< Input parameter
    std::string                         propertyName,	///< Input parameter
    std::string                        &dwGmlOut	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__LatLonListSubgrid                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__LatLonListSubgridResponse" of operation "ns1__LatLonListSubgrid"
struct ns1__LatLonListSubgridResponse
{
    ns2__listLatLonType                 listLatLonOut;
};

/// Operation "ns1__LatLonListSubgrid" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns a list of latitude and longitude pairs in a rectangular subgrid defined
by the lower left and upper right points

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSubgrid"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSubgrid"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSubgridResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__LatLonListSubgrid(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    xsd__decimal                        lowerLeftLatitude,
    xsd__decimal                        lowerLeftLongitude,
    xsd__decimal                        upperRightLatitude,
    xsd__decimal                        upperRightLongitude,
    xsd__decimal                        resolution,
    // output parameters:
    struct ns1__LatLonListSubgridResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__LatLonListSubgrid(
    struct soap *soap,
    // input parameters:
    xsd__decimal                        lowerLeftLatitude,
    xsd__decimal                        lowerLeftLongitude,
    xsd__decimal                        upperRightLatitude,
    xsd__decimal                        upperRightLongitude,
    xsd__decimal                        resolution,
    // output parameters:
    struct ns1__LatLonListSubgridResponse&
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LatLonListSubgrid SOAP
//gsoap ns1  service method-style:	LatLonListSubgrid rpc
//gsoap ns1  service method-encoding:	LatLonListSubgrid http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	LatLonListSubgrid http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSubgrid
//gsoap ns1  service method-output-action:	LatLonListSubgrid http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSubgridResponse
int ns1__LatLonListSubgrid(
    xsd__decimal                        lowerLeftLatitude,	///< Input parameter
    xsd__decimal                        lowerLeftLongitude,	///< Input parameter
    xsd__decimal                        upperRightLatitude,	///< Input parameter
    xsd__decimal                        upperRightLongitude,	///< Input parameter
    xsd__decimal                        resolution,	///< Input parameter
    struct ns1__LatLonListSubgridResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__LatLonListLine                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__LatLonListLineResponse" of operation "ns1__LatLonListLine"
struct ns1__LatLonListLineResponse
{
    ns2__listLatLonType                 listLatLonOut;
};

/// Operation "ns1__LatLonListLine" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns a list of latitude and longitude pairs along a line defined by the latitude
and longitude of the 2 endpoints

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListLine"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListLine"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListLineResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__LatLonListLine(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    xsd__decimal                        endPoint1Lat,
    xsd__decimal                        endPoint1Lon,
    xsd__decimal                        endPoint2Lat,
    xsd__decimal                        endPoint2Lon,
    // output parameters:
    struct ns1__LatLonListLineResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__LatLonListLine(
    struct soap *soap,
    // input parameters:
    xsd__decimal                        endPoint1Lat,
    xsd__decimal                        endPoint1Lon,
    xsd__decimal                        endPoint2Lat,
    xsd__decimal                        endPoint2Lon,
    // output parameters:
    struct ns1__LatLonListLineResponse&
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LatLonListLine SOAP
//gsoap ns1  service method-style:	LatLonListLine rpc
//gsoap ns1  service method-encoding:	LatLonListLine http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	LatLonListLine http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListLine
//gsoap ns1  service method-output-action:	LatLonListLine http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListLineResponse
int ns1__LatLonListLine(
    xsd__decimal                        endPoint1Lat,	///< Input parameter
    xsd__decimal                        endPoint1Lon,	///< Input parameter
    xsd__decimal                        endPoint2Lat,	///< Input parameter
    xsd__decimal                        endPoint2Lon,	///< Input parameter
    struct ns1__LatLonListLineResponse &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__LatLonListZipCode                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__LatLonListZipCodeResponse" of operation "ns1__LatLonListZipCode"
struct ns1__LatLonListZipCodeResponse
{
    ns2__listLatLonType                 listLatLonOut;
};

/// Operation "ns1__LatLonListZipCode" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns a list of latitude and longitude pairs with each pair corresponding to an
input zip code.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListZipCode"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListZipCode"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListZipCodeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__LatLonListZipCode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__zipCodeListType                zipCodeList,
    // output parameters:
    struct ns1__LatLonListZipCodeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__LatLonListZipCode(
    struct soap *soap,
    // input parameters:
    ns2__zipCodeListType                zipCodeList,
    // output parameters:
    struct ns1__LatLonListZipCodeResponse&
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LatLonListZipCode SOAP
//gsoap ns1  service method-style:	LatLonListZipCode rpc
//gsoap ns1  service method-encoding:	LatLonListZipCode http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	LatLonListZipCode http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListZipCode
//gsoap ns1  service method-output-action:	LatLonListZipCode http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListZipCodeResponse
int ns1__LatLonListZipCode(
    ns2__zipCodeListType                zipCodeList,	///< Input parameter
    struct ns1__LatLonListZipCodeResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__LatLonListSquare                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__LatLonListSquareResponse" of operation "ns1__LatLonListSquare"
struct ns1__LatLonListSquareResponse
{
    ns2__listLatLonType                 listLatLonOut;
};

/// Operation "ns1__LatLonListSquare" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns a list of latitude and longitude pairs in a rectangle defined by a central
point and distance from that point in the latitudinal and longitudinal directions

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSquare"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSquare"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSquareResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__LatLonListSquare(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    xsd__decimal                        centerPointLat,
    xsd__decimal                        centerPointLon,
    xsd__decimal                        distanceLat,
    xsd__decimal                        distanceLon,
    xsd__decimal                        resolution,
    // output parameters:
    struct ns1__LatLonListSquareResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__LatLonListSquare(
    struct soap *soap,
    // input parameters:
    xsd__decimal                        centerPointLat,
    xsd__decimal                        centerPointLon,
    xsd__decimal                        distanceLat,
    xsd__decimal                        distanceLon,
    xsd__decimal                        resolution,
    // output parameters:
    struct ns1__LatLonListSquareResponse&
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LatLonListSquare SOAP
//gsoap ns1  service method-style:	LatLonListSquare rpc
//gsoap ns1  service method-encoding:	LatLonListSquare http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	LatLonListSquare http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSquare
//gsoap ns1  service method-output-action:	LatLonListSquare http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListSquareResponse
int ns1__LatLonListSquare(
    xsd__decimal                        centerPointLat,	///< Input parameter
    xsd__decimal                        centerPointLon,	///< Input parameter
    xsd__decimal                        distanceLat,	///< Input parameter
    xsd__decimal                        distanceLon,	///< Input parameter
    xsd__decimal                        resolution,	///< Input parameter
    struct ns1__LatLonListSquareResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__CornerPoints                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__CornerPointsResponse" of operation "ns1__CornerPoints"
struct ns1__CornerPointsResponse
{
    ns2__listLatLonType                 listLatLonOut;
};

/// Operation "ns1__CornerPoints" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns four latitude and longitude pairs for corners of an NDFD grid and the minimum
resolution that will return the entire grid

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#CornerPoints"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#CornerPoints"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#CornerPointsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__CornerPoints(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    enum ns2__sectorType                sector,
    // output parameters:
    struct ns1__CornerPointsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__CornerPoints(
    struct soap *soap,
    // input parameters:
    enum ns2__sectorType                sector,
    // output parameters:
    struct ns1__CornerPointsResponse&
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CornerPoints SOAP
//gsoap ns1  service method-style:	CornerPoints rpc
//gsoap ns1  service method-encoding:	CornerPoints http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	CornerPoints http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#CornerPoints
//gsoap ns1  service method-output-action:	CornerPoints http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#CornerPointsResponse
int ns1__CornerPoints(
    enum ns2__sectorType                sector,	///< Input parameter
    struct ns1__CornerPointsResponse   &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__LatLonListCityNames                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__LatLonListCityNamesResponse" of operation "ns1__LatLonListCityNames"
struct ns1__LatLonListCityNamesResponse
{
    ns2__listCityNamesType              listCityNamesOut;
};

/// Operation "ns1__LatLonListCityNames" of service binding "ndfdXMLBinding"

/**

Operation details:
Returns a list of latitude and longitude pairs paired with the city names they correspond
to

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListCityNames"

  - Addressing input action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListCityNames"

  - Addressing output action: "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListCityNamesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__LatLonListCityNames(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    enum ns2__displayLevelType          displayLevel,
    // output parameters:
    struct ns1__LatLonListCityNamesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__LatLonListCityNames(
    struct soap *soap,
    // input parameters:
    enum ns2__displayLevelType          displayLevel,
    // output parameters:
    struct ns1__LatLonListCityNamesResponse&
  );
@endcode

C++ proxy class (defined in soapndfdXMLBindingProxy.h):
@code
  class ndfdXMLBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapndfdXMLBindingService.h):
@code
  class ndfdXMLBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LatLonListCityNames SOAP
//gsoap ns1  service method-style:	LatLonListCityNames rpc
//gsoap ns1  service method-encoding:	LatLonListCityNames http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	LatLonListCityNames http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListCityNames
//gsoap ns1  service method-output-action:	LatLonListCityNames http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl#LatLonListCityNamesResponse
int ns1__LatLonListCityNames(
    enum ns2__displayLevelType          displayLevel,	///< Input parameter
    struct ns1__LatLonListCityNamesResponse&	///< Output response struct parameter
);

/**

@page ndfdXMLBinding Binding "ndfdXMLBinding"

@section ndfdXMLBinding_policy_enablers Policy Enablers of Binding  "ndfdXMLBinding"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns2 Top-level root elements of schema "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd"

*/

/* End of ndfd.h */
