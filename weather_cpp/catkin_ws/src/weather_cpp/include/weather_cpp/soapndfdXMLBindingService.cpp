/* soapndfdXMLBindingService.cpp
   Generated by gSOAP 2.8.16 from ndfd.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapndfdXMLBindingService.h"

ndfdXMLBindingService::ndfdXMLBindingService()
{	this->soap = soap_new();
	this->own = true;
	ndfdXMLBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ndfdXMLBindingService::ndfdXMLBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	ndfdXMLBindingService_init(_soap->imode, _soap->omode);
}

ndfdXMLBindingService::ndfdXMLBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	ndfdXMLBindingService_init(iomode, iomode);
}

ndfdXMLBindingService::ndfdXMLBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	ndfdXMLBindingService_init(imode, omode);
}

ndfdXMLBindingService::~ndfdXMLBindingService()
{	if (this->own)
		soap_free(this->soap);
}

void ndfdXMLBindingService::ndfdXMLBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "http://graphical.weather.gov/xml/DWMLgen/schema/DWML.xsd", NULL, NULL},
	{"ns1", "http://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
};

void ndfdXMLBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ndfdXMLBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ndfdXMLBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ndfdXMLBindingService *ndfdXMLBindingService::copy()
{	ndfdXMLBindingService *dup = SOAP_NEW_COPY(ndfdXMLBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int ndfdXMLBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ndfdXMLBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int ndfdXMLBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int ndfdXMLBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int ndfdXMLBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int ndfdXMLBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void ndfdXMLBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ndfdXMLBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ndfdXMLBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void ndfdXMLBindingService::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *ndfdXMLBindingService::soap_header()
{	return this->soap->header;
}

int ndfdXMLBindingService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->soap->error;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	else
		return this->soap->error;
	return SOAP_OK;
}

SOAP_SOCKET ndfdXMLBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET ndfdXMLBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ndfdXMLBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int ndfdXMLBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns1__NDFDgen(ndfdXMLBindingService*);
static int serve_ns1__NDFDgenByDay(ndfdXMLBindingService*);
static int serve_ns1__NDFDgenLatLonList(ndfdXMLBindingService*);
static int serve_ns1__NDFDgenByDayLatLonList(ndfdXMLBindingService*);
static int serve_ns1__GmlLatLonList(ndfdXMLBindingService*);
static int serve_ns1__GmlTimeSeries(ndfdXMLBindingService*);
static int serve_ns1__LatLonListSubgrid(ndfdXMLBindingService*);
static int serve_ns1__LatLonListLine(ndfdXMLBindingService*);
static int serve_ns1__LatLonListZipCode(ndfdXMLBindingService*);
static int serve_ns1__LatLonListSquare(ndfdXMLBindingService*);
static int serve_ns1__CornerPoints(ndfdXMLBindingService*);
static int serve_ns1__LatLonListCityNames(ndfdXMLBindingService*);

int ndfdXMLBindingService::dispatch()
{	ndfdXMLBindingService_init(this->soap->imode, this->soap->omode);
	soap_peek_element(this->soap);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:NDFDgen"))
		return serve_ns1__NDFDgen(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:NDFDgenByDay"))
		return serve_ns1__NDFDgenByDay(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:NDFDgenLatLonList"))
		return serve_ns1__NDFDgenLatLonList(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:NDFDgenByDayLatLonList"))
		return serve_ns1__NDFDgenByDayLatLonList(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GmlLatLonList"))
		return serve_ns1__GmlLatLonList(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GmlTimeSeries"))
		return serve_ns1__GmlTimeSeries(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:LatLonListSubgrid"))
		return serve_ns1__LatLonListSubgrid(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:LatLonListLine"))
		return serve_ns1__LatLonListLine(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:LatLonListZipCode"))
		return serve_ns1__LatLonListZipCode(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:LatLonListSquare"))
		return serve_ns1__LatLonListSquare(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:CornerPoints"))
		return serve_ns1__CornerPoints(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:LatLonListCityNames"))
		return serve_ns1__LatLonListCityNames(this);
	return this->soap->error = SOAP_NO_METHOD;
}

static int serve_ns1__NDFDgen(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__NDFDgen soap_tmp_ns1__NDFDgen;
	struct ns1__NDFDgenResponse soap_tmp_ns1__NDFDgenResponse;
	soap_default_ns1__NDFDgenResponse(soap, &soap_tmp_ns1__NDFDgenResponse);
	soap_default_ns1__NDFDgen(soap, &soap_tmp_ns1__NDFDgen);
	if (!soap_get_ns1__NDFDgen(soap, &soap_tmp_ns1__NDFDgen, "ns1:NDFDgen", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->NDFDgen(soap_tmp_ns1__NDFDgen.latitude, soap_tmp_ns1__NDFDgen.longitude, soap_tmp_ns1__NDFDgen.product, soap_tmp_ns1__NDFDgen.startTime, soap_tmp_ns1__NDFDgen.endTime, soap_tmp_ns1__NDFDgen.Unit, soap_tmp_ns1__NDFDgen.weatherParameters, soap_tmp_ns1__NDFDgenResponse.dwmlOut);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__NDFDgenResponse(soap, &soap_tmp_ns1__NDFDgenResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__NDFDgenResponse(soap, &soap_tmp_ns1__NDFDgenResponse, "ns1:NDFDgenResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__NDFDgenResponse(soap, &soap_tmp_ns1__NDFDgenResponse, "ns1:NDFDgenResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__NDFDgenByDay(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__NDFDgenByDay soap_tmp_ns1__NDFDgenByDay;
	struct ns1__NDFDgenByDayResponse soap_tmp_ns1__NDFDgenByDayResponse;
	soap_default_ns1__NDFDgenByDayResponse(soap, &soap_tmp_ns1__NDFDgenByDayResponse);
	soap_default_ns1__NDFDgenByDay(soap, &soap_tmp_ns1__NDFDgenByDay);
	if (!soap_get_ns1__NDFDgenByDay(soap, &soap_tmp_ns1__NDFDgenByDay, "ns1:NDFDgenByDay", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->NDFDgenByDay(soap_tmp_ns1__NDFDgenByDay.latitude, soap_tmp_ns1__NDFDgenByDay.longitude, soap_tmp_ns1__NDFDgenByDay.startDate, soap_tmp_ns1__NDFDgenByDay.numDays, soap_tmp_ns1__NDFDgenByDay.Unit, soap_tmp_ns1__NDFDgenByDay.format, soap_tmp_ns1__NDFDgenByDayResponse.dwmlByDayOut);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__NDFDgenByDayResponse(soap, &soap_tmp_ns1__NDFDgenByDayResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__NDFDgenByDayResponse(soap, &soap_tmp_ns1__NDFDgenByDayResponse, "ns1:NDFDgenByDayResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__NDFDgenByDayResponse(soap, &soap_tmp_ns1__NDFDgenByDayResponse, "ns1:NDFDgenByDayResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__NDFDgenLatLonList(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__NDFDgenLatLonList soap_tmp_ns1__NDFDgenLatLonList;
	struct ns1__NDFDgenLatLonListResponse soap_tmp_ns1__NDFDgenLatLonListResponse;
	soap_default_ns1__NDFDgenLatLonListResponse(soap, &soap_tmp_ns1__NDFDgenLatLonListResponse);
	soap_default_ns1__NDFDgenLatLonList(soap, &soap_tmp_ns1__NDFDgenLatLonList);
	if (!soap_get_ns1__NDFDgenLatLonList(soap, &soap_tmp_ns1__NDFDgenLatLonList, "ns1:NDFDgenLatLonList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->NDFDgenLatLonList(soap_tmp_ns1__NDFDgenLatLonList.listLatLon, soap_tmp_ns1__NDFDgenLatLonList.product, soap_tmp_ns1__NDFDgenLatLonList.startTime, soap_tmp_ns1__NDFDgenLatLonList.endTime, soap_tmp_ns1__NDFDgenLatLonList.Unit, soap_tmp_ns1__NDFDgenLatLonList.weatherParameters, soap_tmp_ns1__NDFDgenLatLonListResponse.dwmlOut);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__NDFDgenLatLonListResponse(soap, &soap_tmp_ns1__NDFDgenLatLonListResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__NDFDgenLatLonListResponse(soap, &soap_tmp_ns1__NDFDgenLatLonListResponse, "ns1:NDFDgenLatLonListResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__NDFDgenLatLonListResponse(soap, &soap_tmp_ns1__NDFDgenLatLonListResponse, "ns1:NDFDgenLatLonListResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__NDFDgenByDayLatLonList(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__NDFDgenByDayLatLonList soap_tmp_ns1__NDFDgenByDayLatLonList;
	struct ns1__NDFDgenByDayLatLonListResponse soap_tmp_ns1__NDFDgenByDayLatLonListResponse;
	soap_default_ns1__NDFDgenByDayLatLonListResponse(soap, &soap_tmp_ns1__NDFDgenByDayLatLonListResponse);
	soap_default_ns1__NDFDgenByDayLatLonList(soap, &soap_tmp_ns1__NDFDgenByDayLatLonList);
	if (!soap_get_ns1__NDFDgenByDayLatLonList(soap, &soap_tmp_ns1__NDFDgenByDayLatLonList, "ns1:NDFDgenByDayLatLonList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->NDFDgenByDayLatLonList(soap_tmp_ns1__NDFDgenByDayLatLonList.listLatLon, soap_tmp_ns1__NDFDgenByDayLatLonList.startDate, soap_tmp_ns1__NDFDgenByDayLatLonList.numDays, soap_tmp_ns1__NDFDgenByDayLatLonList.Unit, soap_tmp_ns1__NDFDgenByDayLatLonList.format, soap_tmp_ns1__NDFDgenByDayLatLonListResponse.dwmlByDayOut);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__NDFDgenByDayLatLonListResponse(soap, &soap_tmp_ns1__NDFDgenByDayLatLonListResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__NDFDgenByDayLatLonListResponse(soap, &soap_tmp_ns1__NDFDgenByDayLatLonListResponse, "ns1:NDFDgenByDayLatLonListResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__NDFDgenByDayLatLonListResponse(soap, &soap_tmp_ns1__NDFDgenByDayLatLonListResponse, "ns1:NDFDgenByDayLatLonListResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__GmlLatLonList(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__GmlLatLonList soap_tmp_ns1__GmlLatLonList;
	struct ns1__GmlLatLonListResponse soap_tmp_ns1__GmlLatLonListResponse;
	soap_default_ns1__GmlLatLonListResponse(soap, &soap_tmp_ns1__GmlLatLonListResponse);
	soap_default_ns1__GmlLatLonList(soap, &soap_tmp_ns1__GmlLatLonList);
	if (!soap_get_ns1__GmlLatLonList(soap, &soap_tmp_ns1__GmlLatLonList, "ns1:GmlLatLonList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GmlLatLonList(soap_tmp_ns1__GmlLatLonList.listLatLon, soap_tmp_ns1__GmlLatLonList.requestedTime, soap_tmp_ns1__GmlLatLonList.featureType, soap_tmp_ns1__GmlLatLonList.weatherParameters, soap_tmp_ns1__GmlLatLonListResponse.dwGmlOut);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__GmlLatLonListResponse(soap, &soap_tmp_ns1__GmlLatLonListResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GmlLatLonListResponse(soap, &soap_tmp_ns1__GmlLatLonListResponse, "ns1:GmlLatLonListResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GmlLatLonListResponse(soap, &soap_tmp_ns1__GmlLatLonListResponse, "ns1:GmlLatLonListResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__GmlTimeSeries(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__GmlTimeSeries soap_tmp_ns1__GmlTimeSeries;
	struct ns1__GmlTimeSeriesResponse soap_tmp_ns1__GmlTimeSeriesResponse;
	soap_default_ns1__GmlTimeSeriesResponse(soap, &soap_tmp_ns1__GmlTimeSeriesResponse);
	soap_default_ns1__GmlTimeSeries(soap, &soap_tmp_ns1__GmlTimeSeries);
	if (!soap_get_ns1__GmlTimeSeries(soap, &soap_tmp_ns1__GmlTimeSeries, "ns1:GmlTimeSeries", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GmlTimeSeries(soap_tmp_ns1__GmlTimeSeries.listLatLon, soap_tmp_ns1__GmlTimeSeries.startTime, soap_tmp_ns1__GmlTimeSeries.endTime, soap_tmp_ns1__GmlTimeSeries.compType, soap_tmp_ns1__GmlTimeSeries.featureType, soap_tmp_ns1__GmlTimeSeries.propertyName, soap_tmp_ns1__GmlTimeSeriesResponse.dwGmlOut);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__GmlTimeSeriesResponse(soap, &soap_tmp_ns1__GmlTimeSeriesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GmlTimeSeriesResponse(soap, &soap_tmp_ns1__GmlTimeSeriesResponse, "ns1:GmlTimeSeriesResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GmlTimeSeriesResponse(soap, &soap_tmp_ns1__GmlTimeSeriesResponse, "ns1:GmlTimeSeriesResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__LatLonListSubgrid(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__LatLonListSubgrid soap_tmp_ns1__LatLonListSubgrid;
	struct ns1__LatLonListSubgridResponse _param_1;
	soap_default_ns1__LatLonListSubgridResponse(soap, &_param_1);
	soap_default_ns1__LatLonListSubgrid(soap, &soap_tmp_ns1__LatLonListSubgrid);
	if (!soap_get_ns1__LatLonListSubgrid(soap, &soap_tmp_ns1__LatLonListSubgrid, "ns1:LatLonListSubgrid", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->LatLonListSubgrid(soap_tmp_ns1__LatLonListSubgrid.lowerLeftLatitude, soap_tmp_ns1__LatLonListSubgrid.lowerLeftLongitude, soap_tmp_ns1__LatLonListSubgrid.upperRightLatitude, soap_tmp_ns1__LatLonListSubgrid.upperRightLongitude, soap_tmp_ns1__LatLonListSubgrid.resolution, _param_1);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__LatLonListSubgridResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__LatLonListSubgridResponse(soap, &_param_1, "ns1:LatLonListSubgridResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__LatLonListSubgridResponse(soap, &_param_1, "ns1:LatLonListSubgridResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__LatLonListLine(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__LatLonListLine soap_tmp_ns1__LatLonListLine;
	struct ns1__LatLonListLineResponse _param_2;
	soap_default_ns1__LatLonListLineResponse(soap, &_param_2);
	soap_default_ns1__LatLonListLine(soap, &soap_tmp_ns1__LatLonListLine);
	if (!soap_get_ns1__LatLonListLine(soap, &soap_tmp_ns1__LatLonListLine, "ns1:LatLonListLine", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->LatLonListLine(soap_tmp_ns1__LatLonListLine.endPoint1Lat, soap_tmp_ns1__LatLonListLine.endPoint1Lon, soap_tmp_ns1__LatLonListLine.endPoint2Lat, soap_tmp_ns1__LatLonListLine.endPoint2Lon, _param_2);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__LatLonListLineResponse(soap, &_param_2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__LatLonListLineResponse(soap, &_param_2, "ns1:LatLonListLineResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__LatLonListLineResponse(soap, &_param_2, "ns1:LatLonListLineResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__LatLonListZipCode(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__LatLonListZipCode soap_tmp_ns1__LatLonListZipCode;
	struct ns1__LatLonListZipCodeResponse _param_3;
	soap_default_ns1__LatLonListZipCodeResponse(soap, &_param_3);
	soap_default_ns1__LatLonListZipCode(soap, &soap_tmp_ns1__LatLonListZipCode);
	if (!soap_get_ns1__LatLonListZipCode(soap, &soap_tmp_ns1__LatLonListZipCode, "ns1:LatLonListZipCode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->LatLonListZipCode(soap_tmp_ns1__LatLonListZipCode.zipCodeList, _param_3);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__LatLonListZipCodeResponse(soap, &_param_3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__LatLonListZipCodeResponse(soap, &_param_3, "ns1:LatLonListZipCodeResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__LatLonListZipCodeResponse(soap, &_param_3, "ns1:LatLonListZipCodeResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__LatLonListSquare(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__LatLonListSquare soap_tmp_ns1__LatLonListSquare;
	struct ns1__LatLonListSquareResponse _param_4;
	soap_default_ns1__LatLonListSquareResponse(soap, &_param_4);
	soap_default_ns1__LatLonListSquare(soap, &soap_tmp_ns1__LatLonListSquare);
	if (!soap_get_ns1__LatLonListSquare(soap, &soap_tmp_ns1__LatLonListSquare, "ns1:LatLonListSquare", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->LatLonListSquare(soap_tmp_ns1__LatLonListSquare.centerPointLat, soap_tmp_ns1__LatLonListSquare.centerPointLon, soap_tmp_ns1__LatLonListSquare.distanceLat, soap_tmp_ns1__LatLonListSquare.distanceLon, soap_tmp_ns1__LatLonListSquare.resolution, _param_4);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__LatLonListSquareResponse(soap, &_param_4);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__LatLonListSquareResponse(soap, &_param_4, "ns1:LatLonListSquareResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__LatLonListSquareResponse(soap, &_param_4, "ns1:LatLonListSquareResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__CornerPoints(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__CornerPoints soap_tmp_ns1__CornerPoints;
	struct ns1__CornerPointsResponse _param_5;
	soap_default_ns1__CornerPointsResponse(soap, &_param_5);
	soap_default_ns1__CornerPoints(soap, &soap_tmp_ns1__CornerPoints);
	if (!soap_get_ns1__CornerPoints(soap, &soap_tmp_ns1__CornerPoints, "ns1:CornerPoints", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CornerPoints(soap_tmp_ns1__CornerPoints.sector, _param_5);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__CornerPointsResponse(soap, &_param_5);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__CornerPointsResponse(soap, &_param_5, "ns1:CornerPointsResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__CornerPointsResponse(soap, &_param_5, "ns1:CornerPointsResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__LatLonListCityNames(ndfdXMLBindingService *service)
{	struct soap *soap = service->soap;
	struct ns1__LatLonListCityNames soap_tmp_ns1__LatLonListCityNames;
	struct ns1__LatLonListCityNamesResponse _param_6;
	soap_default_ns1__LatLonListCityNamesResponse(soap, &_param_6);
	soap_default_ns1__LatLonListCityNames(soap, &soap_tmp_ns1__LatLonListCityNames);
	if (!soap_get_ns1__LatLonListCityNames(soap, &soap_tmp_ns1__LatLonListCityNames, "ns1:LatLonListCityNames", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->LatLonListCityNames(soap_tmp_ns1__LatLonListCityNames.displayLevel, _param_6);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__LatLonListCityNamesResponse(soap, &_param_6);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__LatLonListCityNamesResponse(soap, &_param_6, "ns1:LatLonListCityNamesResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__LatLonListCityNamesResponse(soap, &_param_6, "ns1:LatLonListCityNamesResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
